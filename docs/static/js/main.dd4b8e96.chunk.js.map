{"version":3,"sources":["InternalDataTypes/Address.js","InternalDataTypes/CompanyInfo.js","InternalDataTypes/CompanyRequisites.js","WebSiteStructure.js","SectionPathEnum.js","InternalDataTypes/Prettifier.js","Analytics.js","common/Header.js","common/Footer.js","sections/MainPage.js","EmployeeData.js","Employee.js","sections/CompanyPage.js","Map.js","sections/ContactsPage.js","common/Carousel.js","InternalDataTypes/Project.js","common/ProjectThumbnail.js","sections/PortfolioPage.js","sections/ServicesPage.js","sections/ClientsPage.js","sections/NewsPage.js","sections/NotFoundPage.js","sections/ProjectPage.js","common/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["Address","Object","classCallCheck","this","Latitude","Longitude","Zoom","MapLabel","CompanyInfo","_this","getPhoneNumber","PhoneNumber","getFaxNumber","FaxNumber","getEmail","EMail","getName","Name","getLegalAddress","LegalAddress","getOfficeAddress","OfficeAddress","getCorrespondenceAddress","CorrespondenceAddress","getWorkingHours","WorkingHours","getFoundationYear","FoundationYear","RequisiteName","freeze","TaxIdentificationNumber","RegistrationReasonCode","CheckingAccount","CorrespondentAccount","BankIdentificationCode","PrimaryStateRegistrationNumber","IdentifierOfEnterprisesAndOrganizations","CompanyRequisites","getTaxIdentificationNumber","getRegistrationReasonCode","getCheckingAccount","getCorrespondentAccount","getBankIdentificationCode","getPrimaryStateRegistrationNumber","getIdentifierOfEnterprisesAndOrganizations","WebSiteStructure","getCompanyInfo","getCompanyRequisites","getListOfSections","filterVisibleAndSort","Sections","getListOfSocialMedia","SocialMedias","getListOfClientLogos","Clients","getListOfKeyEmployees","Employees","getListOfProjects","Projects","filter","project","IsHidden","sort","a","b","firstDate","Date","setHours","secondDate","OrdinalNumber","getProjectByPath","path","find","Path","sectionIsVisible","sectionPath","section","items","filteredItems","item","SectionPathEnum","Main","Company","Contacts","Portfolio","Services","News","NotFound","Prettifier","prettifyPhoneNumber","rawPhoneNumber","substring","ActionTypes","LinkClicked","Toggle","Outbound","Analytics","pageChanged","pagePath","pageTitle","pageUrl","data","gtag","window","fireEvent","action","eventCategory","eventLabel","eventValue","Header","state","navigationBar","sticky","handleScroll","_this$state","pageYOffset","classList","add","remove","getLinksToSections","webSiteStructure","props","currentSection","sectionList","map","isActive","react_default","createElement","className","key","Link","to","process","onClick","sectionChanged","addEventListener","bar","document","getElementById","stickyValue","offsetTop","setState","_this2","companyInfo","phoneNumberRaw","phoneNumberPretty","companyName","email","goToMainSection","Fragment","style","height","width","src","alt","href","id","zIndex","type","data-toggle","data-target","React","Component","Footer","getLinksToSocialMedia","linkList","link","target","rel","PathToImage","linkRows","start","end","length","push","slice","rowList","row","index","legalAddress","foundationYear","currentYear","getFullYear","yearsOfExistence","color","paddingTop","lineHeight","borderColor","textAlign","MainPage","Redirect","EmployeeData","Photo","Position","Employee","float","PathToPhoto","FullName","CompanyPage","getKeyEmployees","employeeList","employee","Employee_Employee","assign","AnyReactComponent","_ref","text","Map","address","lib_default","defaultCenter","lat","lng","defaultZoom","Map_AnyReactComponent","ContactsPage","faxNumberRaw","faxNumberPretty","officeAddress","correspondenceAddress","workingHours","requisites","Map_Map","Carousel","getIndicators","numberOfSlides","getNumberOfSlides","indicatorList","Array","from","value","data-slide-to","numberOfItemsPerSlide","numberOfRows","numberOfColumns","totalNumberOfItems","getTotalNumberOfItems","Math","floor","getSlides","slides","slideCounter","slide","rows","getRows","slideList","mapSlides","role","rowCounter","columns","getColumns","itemsPassed","columnCounter","column","itemId","mapRows","columnList","mapColumns","itemData","renderItem","getControls","data-slide","aria-hidden","data-ride","ContentType","Video","Project","ThumbnailImage","Description","Tags","Content","ProjectThumbnail","projectPath","PortfolioPage","renderProjectThumbnail","projectData","ProjectThumbnail_ProjectThumbnail","Carousel_Carousel","ServicesPage","ClientsPage","getClientLogos","logoList","logo","NewsPage","NotFoundPage","ProjectPage","renderContent","content","frameBorder","console","error","projectUrl","location","portfolioUrl","indexOf","MainContent","Switch","Route","exact","render","MainPage_MainPage","CompanyPage_CompanyPage","ContactsPage_ContactsPage","PortfolioPage_PortfolioPage","ProjectPage_ProjectPage","ServicesPage_ServicesPage","ClientsPage_ClientsPage","NewsPage_NewsPage","NotFoundPage_NotFoundPage","App","fetch","then","response","json","parsedData","padding","Header_Header","MainContent_MainContent","Footer_Footer","Boolean","hostname","match","ReactDOM","BrowserRouter","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd4b8e96.chunk.js","sourcesContent":["class Address {\r\n    constructor() {\r\n        this.Address = '';\r\n        this.Latitude = 0;\r\n        this.Longitude = 0;\r\n        this.Zoom = 1;\r\n        this.MapLabel = '';\r\n    }\r\n}\r\n\r\nexport { Address };\r\n","import { Address } from './Address';\r\n\r\nclass CompanyInfo {\r\n    constructor() {\r\n        this.PhoneNumber = '';\r\n        this.FaxNumber = '';\r\n        this.EMail = '';\r\n        this.Name = '';\r\n        this.LegalAddress = new Address();\r\n        this.OfficeAddress = new Address();\r\n        this.CorrespondenceAddress = new Address();\r\n        this.WorkingHours = '';\r\n        this.FoundationYear = 2018;\r\n    }\r\n    getPhoneNumber = () => {\r\n        return this.PhoneNumber;\r\n    };\r\n    getFaxNumber = () => {\r\n        return this.FaxNumber;\r\n    };\r\n    getEmail = () => {\r\n        return this.EMail;\r\n    };\r\n    getName = () => {\r\n        return this.Name;\r\n    };\r\n    getLegalAddress = () => {\r\n        return this.LegalAddress;\r\n    };\r\n    getOfficeAddress = () => {\r\n        return this.OfficeAddress;\r\n    };\r\n    getCorrespondenceAddress = () => {\r\n        return this.CorrespondenceAddress;\r\n    };\r\n    getWorkingHours = () => {\r\n        return this.WorkingHours;\r\n    };\r\n    getFoundationYear = () => {\r\n        return this.FoundationYear;\r\n    };\r\n}\r\n\r\nexport { CompanyInfo };\r\n","let RequisiteName = Object.freeze({\r\n    TaxIdentificationNumber: 'ИНН',\r\n    RegistrationReasonCode: 'КПП',\r\n    CheckingAccount: 'Расчётный счёт',\r\n    CorrespondentAccount: 'Корреспондентский счёт',\r\n    BankIdentificationCode: 'БИК',\r\n    PrimaryStateRegistrationNumber: 'ОГРН',\r\n    IdentifierOfEnterprisesAndOrganizations: 'ОКПО'\r\n});\r\n\r\nclass CompanyRequisites {\r\n    constructor() {\r\n        this.TaxIdentificationNumber = '';\r\n        this.RegistrationReasonCode = '';\r\n        this.CheckingAccount = '';\r\n        this.CorrespondentAccount = '';\r\n        this.BankIdentificationCode = '';\r\n        this.PrimaryStateRegistrationNumber = '';\r\n        this.IdentifierOfEnterprisesAndOrganizations = '';\r\n    }\r\n    getTaxIdentificationNumber = () => {\r\n        return this.TaxIdentificationNumber;\r\n    };\r\n    getRegistrationReasonCode = () => {\r\n        return this.RegistrationReasonCode;\r\n    };\r\n    getCheckingAccount = () => {\r\n        return this.CheckingAccount;\r\n    };\r\n    getCorrespondentAccount = () => {\r\n        return this.CorrespondentAccount;\r\n    };\r\n    getBankIdentificationCode = () => {\r\n        return this.BankIdentificationCode;\r\n    };\r\n    getPrimaryStateRegistrationNumber = () => {\r\n        return this.PrimaryStateRegistrationNumber;\r\n    };\r\n    getIdentifierOfEnterprisesAndOrganizations = () => {\r\n        return this.IdentifierOfEnterprisesAndOrganizations;\r\n    };\r\n}\r\n\r\nexport { CompanyRequisites, RequisiteName };\r\n","import { CompanyInfo } from './InternalDataTypes/CompanyInfo';\r\nimport { CompanyRequisites } from './InternalDataTypes/CompanyRequisites';\r\n\r\nclass WebSiteStructure {\r\n    constructor() {\r\n        this.CompanyInfo = new CompanyInfo();\r\n        this.CompanyRequisites = new CompanyRequisites();\r\n        this.Sections = [];\r\n        this.SocialMedias = [];\r\n        this.Clients = [];\r\n        this.Employees = [];\r\n        this.Projects = [];\r\n    }\r\n    getCompanyInfo = () => {\r\n        return this.CompanyInfo;\r\n    };\r\n    getCompanyRequisites = () => {\r\n        return this.CompanyRequisites;\r\n    };\r\n    getListOfSections = () => {\r\n        return this.filterVisibleAndSort(this.Sections);\r\n    };\r\n    getListOfSocialMedia = () => {\r\n        return this.filterVisibleAndSort(this.SocialMedias);\r\n    };\r\n    getListOfClientLogos = () => {\r\n        return this.filterVisibleAndSort(this.Clients);\r\n    };\r\n    getListOfKeyEmployees = () => {\r\n        return this.filterVisibleAndSort(this.Employees);\r\n    };\r\n    getListOfProjects = () => {\r\n        let projects = this.Projects.filter(project => !project.IsHidden);\r\n        projects.sort((a, b) => {\r\n            let firstDate = new Date(a.Date);\r\n            firstDate.setHours(0, 0, 0, 0);\r\n\r\n            let secondDate = new Date(b.Date);\r\n            secondDate.setHours(0, 0, 0, 0);\r\n\r\n            if(firstDate < secondDate)\r\n                return -1;\r\n            if(secondDate < firstDate)\r\n                return 1;\r\n\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n\r\n            return 0;\r\n        });\r\n    };\r\n    getProjectByPath = (path) => {\r\n        const project = this.Projects.find(project => project.Path === path);\r\n        return project;\r\n    };\r\n\r\n    sectionIsVisible = (sectionPath) => {\r\n        let section = this.Sections.find(section => section.Path === sectionPath);\r\n        if(section)\r\n            return !section.IsHidden;\r\n        return false;\r\n    };\r\n    filterVisibleAndSort = (items) => {\r\n        let filteredItems = items.filter(item => !item.IsHidden);\r\n        filteredItems.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return filteredItems;\r\n    }\r\n}\r\n\r\nexport { WebSiteStructure };\r\n","let SectionPathEnum = Object.freeze({\r\n    Main: '/main',\r\n    Company: '/company',\r\n    Contacts: '/contacts',\r\n    Portfolio: '/portfolio',\r\n    Services: '/services',\r\n    Clients: '/clients',\r\n    News: '/news',\r\n    NotFound: '/pageNotFound'\r\n});\r\n\r\nexport { SectionPathEnum };\r\n","class Prettifier {\r\n    static prettifyPhoneNumber = (rawPhoneNumber) => {\r\n        let prettyPhoneNumber =\r\n            rawPhoneNumber.substring(0, 2)\r\n            + ' ('\r\n            + rawPhoneNumber.substring(2, 5)\r\n            + ') '\r\n            + rawPhoneNumber.substring(5, 8)\r\n            + '-'\r\n            + rawPhoneNumber.substring(8, 10)\r\n            + '-'\r\n            + rawPhoneNumber.substring(10, 12);\r\n        return prettyPhoneNumber;\r\n    };\r\n}\r\n\r\nexport { Prettifier }\r\n","let ActionTypes = Object.freeze({\r\n    LinkClicked: 'Link click',\r\n    Toggle: 'Toggled',\r\n    Outbound: 'Outbound'\r\n});\r\n\r\nclass Analytics {\r\n    static pageChanged = (pagePath, pageTitle, pageUrl) => {\r\n        let data = {};\r\n        if(pagePath)    data['page_path'] = pagePath;\r\n        if(pageTitle)   data['page_title'] = pageTitle;\r\n        if(pageUrl)     data['page_location'] = pageUrl;\r\n\r\n        const gtag = window.gtag;\r\n        gtag('config', 'UA-130276012-1', data);\r\n    };\r\n    static fireEvent = (action, eventCategory, eventLabel, eventValue) => {\r\n        let data = {};\r\n        if(eventCategory)   data['event_category'] = eventCategory;\r\n        if(eventLabel)      data['event_label'] = eventLabel;\r\n        if(eventValue)      data['value'] = eventValue;\r\n\r\n        const gtag = window.gtag;\r\n        gtag('event', action, data);\r\n    };\r\n}\r\n\r\nexport { Analytics, ActionTypes };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Link } from 'react-router-dom';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Prettifier } from '../InternalDataTypes/Prettifier';\r\nimport { Analytics, ActionTypes } from '../Analytics';\r\n\r\nclass Header extends React.Component {\r\n    state = {\r\n        navigationBar: null,\r\n        sticky: null\r\n    };\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.handleScroll);\r\n        let bar = document.getElementById('header-navigation-bar');\r\n        let stickyValue = bar.offsetTop;\r\n        this.setState({ navigationBar: bar, sticky: stickyValue});\r\n    }\r\n    handleScroll = () => {\r\n        const { navigationBar, sticky } = this.state;\r\n        if(window.pageYOffset >= sticky)\r\n            navigationBar.classList.add('sticky');\r\n        else\r\n            navigationBar.classList.remove('sticky');\r\n    };\r\n    getLinksToSections = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const currentSection = this.props.currentSection;\r\n        const sections = webSiteStructure.getListOfSections();\r\n        const sectionList = sections.map(section => {\r\n            const isActive = currentSection === section.Path ? 'active' : '';\r\n            let sectionChanged = () => {\r\n                Analytics.pageChanged(section.Path);\r\n                this.props.sectionChanged(section.Path);\r\n            };\r\n            return (\r\n                <li className={ isActive } key={ section.OrdinalNumber }>\r\n                    <Link\r\n                        to={ process.env.PUBLIC_URL + section.Path }\r\n                        onClick={ () => { sectionChanged(); Analytics.fireEvent(ActionTypes.LinkClicked, 'Header section \\'' + section.Path + '\\''); } }\r\n                    >{ section.Name }</Link>\r\n                </li>\r\n            );\r\n        });\r\n        return (\r\n            <ul className='nav navbar-nav navbar-right'>\r\n                { sectionList }\r\n            </ul>\r\n        );\r\n    };\r\n    render() {\r\n        const companyInfo = this.props.webSiteStructure.getCompanyInfo();\r\n        const phoneNumberRaw = companyInfo.getPhoneNumber();\r\n        const phoneNumberPretty = Prettifier.prettifyPhoneNumber(phoneNumberRaw);\r\n        const companyName = companyInfo.getName();\r\n        const email = companyInfo.getEmail();\r\n\r\n        let goToMainSection = () => {\r\n            Analytics.pageChanged(SectionPathEnum.Main);\r\n            this.props.sectionChanged(SectionPathEnum.Main);\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className='navbar-default'>\r\n                    <div className='row'>\r\n                        <div className='col-xs-8'>\r\n                            <Link\r\n                                to={ process.env.PUBLIC_URL + SectionPathEnum.Main }\r\n                                onClick={ () => { goToMainSection(); Analytics.fireEvent(ActionTypes.LinkClicked, 'Header logo')} }\r\n                            >\r\n                                <img className='navbar-brand' style={ { height: '128px', width: '128px' } } src='/logo.svg' alt={ companyName } />\r\n                            </Link>\r\n                        </div>\r\n                        <div className='col-xs-4 header-contacts'>\r\n                            <div className='row'>\r\n                                <a\r\n                                    href={ 'tel:' + phoneNumberRaw }\r\n                                    onClick={ () => { Analytics.fireEvent(ActionTypes.LinkClicked, 'Header phone number') } }\r\n                                >{ phoneNumberPretty }</a>\r\n                            </div>\r\n                            <div className='row'>\r\n                                <a\r\n                                    href={ 'mailto:' + email }\r\n                                    onClick={ () => { Analytics.fireEvent(ActionTypes.LinkClicked, 'Header email address') } }\r\n                                >{ email }</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <nav id='header-navigation-bar' className='navbar navbar-inverse' style={ { zIndex: 99 } }>\r\n                    <div className='container-fluid'>\r\n                        <div className='navbar-header'>\r\n                            <button\r\n                                type='button'\r\n                                className='navbar-toggle'\r\n                                data-toggle='collapse'\r\n                                data-target='#header-navbar'\r\n                                onClick={ () => { Analytics.fireEvent(ActionTypes.Toggle, 'Header navigation bar')}}\r\n                            >\r\n                                <span className='icon-bar'></span>\r\n                                <span className='icon-bar'></span>\r\n                                <span className='icon-bar'></span>\r\n                            </button>\r\n                            <Link\r\n                                className='navbar-brand'\r\n                                to={ process.env.PUBLIC_URL + SectionPathEnum.Main }\r\n                                onClick={ () => { goToMainSection(); Analytics.fireEvent(ActionTypes.LinkClicked, 'Header company name')} }\r\n                            >{ companyName }</Link>\r\n                        </div>\r\n\r\n                        <div className='collapse navbar-collapse' id='header-navbar'>\r\n                            { this.getLinksToSections() }\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired,\r\n    currentSection: PropTypes.string.isRequired,\r\n    sectionChanged: PropTypes.func.isRequired\r\n};\r\n\r\nexport { Header };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Link } from 'react-router-dom';\r\nimport { Prettifier } from '../InternalDataTypes/Prettifier';\r\nimport { Analytics, ActionTypes } from '../Analytics';\r\n\r\nclass Footer extends React.Component {\r\n    getLinksToSections = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const currentSection = this.props.currentSection;\r\n        const sections = webSiteStructure.getListOfSections();\r\n        const sectionList = sections.map(section => {\r\n            let isActive = '';\r\n            if(currentSection === section.Path)\r\n                isActive = ' active';\r\n            let sectionChanged = () => {\r\n                Analytics.pageChanged(section.Path);\r\n                this.props.sectionChanged(section.Path);\r\n            };\r\n            return (\r\n                <li className={ 'footer-nav-element' + isActive } key={ section.OrdinalNumber }>\r\n                    <Link\r\n                        className='footer-nav-element-selected'\r\n                        to={ process.env.PUBLIC_URL + section.Path }\r\n                        onClick={ () => { sectionChanged(); Analytics.fireEvent(ActionTypes.LinkClicked, 'Footer section \\'' + section.Path + '\\''); } }\r\n                    >{ section.Name }</Link>\r\n                </li>);\r\n        });\r\n        return (<ul className='nav navbar-nav'>{ sectionList }</ul>);\r\n    };\r\n    getLinksToSocialMedia = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const links = webSiteStructure.getListOfSocialMedia();\r\n        const linkList = links.map(link => {\r\n            return (\r\n                <a\r\n                    key={ link.OrdinalNumber }\r\n                    href={ link.Link }\r\n                    target='_blank' rel='noopener noreferrer'\r\n                    onClick={ () => { Analytics.fireEvent(ActionTypes.Outbound, link.Link, link.Link)} }\r\n                >\r\n                    <img className='social-media-icon' src={ process.env.PUBLIC_URL + link.PathToImage } alt={ link.Link }/>\r\n                </a>\r\n            );\r\n        });\r\n\r\n        const chunkSize = 5;\r\n        let linkRows = [];\r\n        for(let start = 0, end = linkList.length; start < end; start += chunkSize)\r\n            linkRows.push(linkList.slice(start, start + chunkSize));\r\n\r\n        const rowList = linkRows.map((row, index) => {\r\n            return (<div className='row' key={ index }>{ row }</div>);\r\n        });\r\n\r\n        return (<React.Fragment>{ rowList }</React.Fragment>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const phoneNumberRaw = webSiteStructure.getCompanyInfo().getPhoneNumber();\r\n        const phoneNumberPretty = Prettifier.prettifyPhoneNumber(phoneNumberRaw);\r\n        const companyName = webSiteStructure.getCompanyInfo().getName();\r\n        const email = webSiteStructure.getCompanyInfo().getEmail();\r\n        const legalAddress = webSiteStructure.getCompanyInfo().getLegalAddress().Address;\r\n\r\n        const foundationYear = webSiteStructure.getCompanyInfo().getFoundationYear();\r\n        const currentYear = (new Date()).getFullYear();\r\n        const yearsOfExistence = foundationYear === currentYear ? foundationYear : foundationYear + ' - ' + currentYear;\r\n\r\n        return (\r\n            <div id='footer-block'>\r\n                <div style={ { color: '#9d9d9d' } }>\r\n                    <div className='row' style={ { paddingTop: '30px' } }>\r\n                        <div className='col-xs-6' style={ { lineHeight: 1.8 } }>\r\n                            <div className='row'>{ companyName }</div>\r\n                            <div className='row'>{ legalAddress }</div>\r\n                            <div className='row footer-contacts'>\r\n                                <a href={ 'mailto:' + email }\r\n                                   onClick={ () => { Analytics.fireEvent(ActionTypes.LinkClicked, 'Footer email address') } }\r\n                                >{ email }</a>\r\n                            </div>\r\n                            <div className='row footer-contacts'>\r\n                                <a\r\n                                    href={ 'tel:' + phoneNumberRaw }\r\n                                    onClick={ () => { Analytics.fireEvent(ActionTypes.LinkClicked, 'Footer phone number') } }\r\n                                >{ phoneNumberPretty }</a>\r\n                            </div>\r\n                            <div className='row'>\r\n                                { this.getLinksToSocialMedia() }\r\n                            </div>\r\n                        </div>\r\n                        <div className='col-xs-3'>\r\n                        </div>\r\n                        <div className='col-xs-3'>\r\n                            <div className='navbar navbar-inverse navbar-stacked' style={ { borderColor: 'transparent' } }>\r\n                                { this.getLinksToSections() }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row' style={ { lineHeight: 3.8, textAlign: 'center' } }>© { yearsOfExistence } { companyName }</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFooter.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired,\r\n    currentSection: PropTypes.string.isRequired,\r\n    sectionChanged: PropTypes.func.isRequired\r\n};\r\n\r\nexport { Footer };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass MainPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Main);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Главная</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMainPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired\r\n};\r\n\r\nexport { MainPage };\r\n","class EmployeeData {\r\n    constructor() {\r\n        this.OrdinalNumber = 0;\r\n        this.IsHidden = false;\r\n        this.Photo = '';\r\n        this.Name = '';\r\n        this.Position = '';\r\n        this.PhoneNumber = '';\r\n        this.EMail = '';\r\n    }\r\n}\r\n\r\nexport { EmployeeData };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { EmployeeData } from './EmployeeData';\r\nimport { Prettifier } from './InternalDataTypes/Prettifier';\r\nimport { Analytics, ActionTypes } from './Analytics';\r\n\r\nclass Employee extends React.Component {\r\n    render() {\r\n        const data = this.props.data;\r\n        const phoneNumberRaw = data.PhoneNumber;\r\n        const phoneNumberPretty = Prettifier.prettifyPhoneNumber(phoneNumberRaw);\r\n        const email = data.EMail;\r\n\r\n        return (\r\n            <div>\r\n                <div style={ { float: 'left' } }>\r\n                    <img style={ { height: '128px', width: '128px' } } src={ process.env.PUBLIC_URL + data.PathToPhoto } alt={ data.Name }/>\r\n                </div>\r\n                <div>\r\n                    <p><b>ФИО:</b> { data.FullName }</p>\r\n                    <p><b>Должность:</b> { data.Position }</p>\r\n                    <p className='employee-contacts'>\r\n                        <b>Телефон:</b> <a\r\n                            href={ 'tel:' + phoneNumberRaw }\r\n                            onClick={ () => { Analytics.fireEvent(ActionTypes.LinkClicked, 'Employee phone number \\'' + data.FullName + '\\'') } }\r\n                        >{ phoneNumberPretty }</a>\r\n                    </p>\r\n                    <p className='employee-contacts'>\r\n                        <b>Почта:</b> <a\r\n                            href={ 'mailto:' + email }\r\n                            onClick={ () => { Analytics.fireEvent(ActionTypes.LinkClicked, 'Employee email address \\'' + data.FullName + '\\'') } }\r\n                        >{ email }</a>\r\n                    </p>\r\n                    <br /><br />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nEmployee.propTypes = {\r\n    data: PropTypes.instanceOf(EmployeeData).isRequired\r\n};\r\n\r\nexport { Employee };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Employee } from '../Employee';\r\nimport { EmployeeData } from '../EmployeeData';\r\n\r\nclass CompanyPage extends React.Component {\r\n    getKeyEmployees = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const employees = webSiteStructure.getListOfKeyEmployees();\r\n\r\n        const employeeList = employees.map(employee => {\r\n            return (\r\n                <Employee key={ employee.OrdinalNumber } data={ Object.assign(new EmployeeData(), employee) } />\r\n            );\r\n        });\r\n        return (<div>{ employeeList }</div>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Company);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>О компании</h1>\r\n                <p>текст с описанием того, какие мы успешные и прочий маркетинговый текст, когда основана, статистика по проектам, может инфа по количеству сотрудников</p>\r\n                { this.getKeyEmployees() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCompanyPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired\r\n};\r\n\r\nexport { CompanyPage };\r\n","import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport PropTypes from 'prop-types';\r\nimport { Address } from './InternalDataTypes/Address';\r\n\r\nconst AnyReactComponent = ({ text }) => <div id='map-office-label'>{text}</div>;\r\n\r\nclass Map extends Component {\r\n    render() {\r\n        const address = this.props.address;\r\n\r\n        return (\r\n            // Important! Always set the container height explicitly\r\n            <div style={{ height: '500px', width: '100%' }}>\r\n                <GoogleMapReact\r\n                    defaultCenter={ { lat: address.Latitude, lng: address.Longitude } }\r\n                    defaultZoom={address.Zoom}\r\n                >\r\n                    <AnyReactComponent\r\n                        lat={address.Latitude}\r\n                        lng={address.Longitude}\r\n                        text={address.MapLabel}\r\n                    />\r\n                </GoogleMapReact>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMap.propTypes = {\r\n    address: PropTypes.instanceOf(Address).isRequired\r\n};\r\n\r\nexport { Map };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Map } from '../Map';\r\nimport { Prettifier } from '../InternalDataTypes/Prettifier';\r\nimport { Address } from '../InternalDataTypes/Address';\r\nimport { RequisiteName } from '../InternalDataTypes/CompanyRequisites';\r\nimport { ActionTypes, Analytics } from '../Analytics';\r\n\r\nclass ContactsPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Contacts);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        const phoneNumberRaw = webSiteStructure.getCompanyInfo().getPhoneNumber();\r\n        const phoneNumberPretty = Prettifier.prettifyPhoneNumber(phoneNumberRaw);\r\n        const faxNumberRaw = webSiteStructure.getCompanyInfo().getFaxNumber();\r\n        const faxNumberPretty = Prettifier.prettifyPhoneNumber(faxNumberRaw);\r\n        const legalAddress = webSiteStructure.getCompanyInfo().getLegalAddress().Address;\r\n        const officeAddress = webSiteStructure.getCompanyInfo().getOfficeAddress();\r\n        const correspondenceAddress = webSiteStructure.getCompanyInfo().getCorrespondenceAddress().Address;\r\n        const workingHours = webSiteStructure.getCompanyInfo().getWorkingHours();\r\n        const email = webSiteStructure.getCompanyInfo().getEmail();\r\n\r\n        const requisites = webSiteStructure.getCompanyRequisites();\r\n\r\n        return (\r\n            <div>\r\n                <div className='row'>\r\n                    <div className='col-xs-6'>\r\n                        <h2>Контакты</h2>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Юридический телефон:</td>\r\n                                    <td>\r\n                                        <span className='employee-contacts'>\r\n                                            <a\r\n                                                href={ 'tel:' + phoneNumberRaw }\r\n                                                onClick={ () => { Analytics.fireEvent(ActionTypes.LinkClicked, 'Contacts phone number') } }\r\n                                            >{ phoneNumberPretty }</a>\r\n                                        </span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Факс:</td>\r\n                                    <td>\r\n                                        <span className='employee-contacts'>\r\n                                            <a\r\n                                                href={ 'tel:' + faxNumberRaw }\r\n                                                onClick={ () => { Analytics.fireEvent(ActionTypes.LinkClicked, 'Contacts fax number') } }\r\n                                            >{ faxNumberPretty }</a>\r\n                                        </span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Юридический адрес:</td>\r\n                                    <td>{ legalAddress }</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Адрес офиса:</td>\r\n                                    <td>{ officeAddress.Address }</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Почтовый адрес:</td>\r\n                                    <td>{ correspondenceAddress }</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Время работы:</td>\r\n                                    <td>{ workingHours }</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Адрес электронной почты:</td>\r\n                                    <td>\r\n                                        <span className='employee-contacts'>\r\n                                            <a\r\n                                                href={ 'mailto:' + email }\r\n                                                onClick={ () => { Analytics.fireEvent(ActionTypes.LinkClicked, 'Contacts email address') } }\r\n                                            >{ email }</a></span>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className='col-xs-6'>\r\n                        <h2>Реквизиты</h2>\r\n                        <table>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>{ RequisiteName.TaxIdentificationNumber + ':'}</td>\r\n                                <td>{ requisites.getTaxIdentificationNumber() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.RegistrationReasonCode + ':'}</td>\r\n                                <td>{ requisites.getRegistrationReasonCode() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.CheckingAccount + ':'}</td>\r\n                                <td>{ requisites.getCheckingAccount() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.CorrespondentAccount + ':'}</td>\r\n                                <td>{ requisites.getCorrespondentAccount() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.BankIdentificationCode + ':'}</td>\r\n                                <td>{ requisites.getBankIdentificationCode() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.PrimaryStateRegistrationNumber + ':'}</td>\r\n                                <td>{ requisites.getPrimaryStateRegistrationNumber() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.IdentifierOfEnterprisesAndOrganizations + ':'}</td>\r\n                                <td>{ requisites.getIdentifierOfEnterprisesAndOrganizations() }</td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <Map address={ Object.assign(new Address(), officeAddress) }/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nContactsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired\r\n};\r\n\r\nexport { ContactsPage };\r\n\r\n/*\r\n    - телефон наш или менеджеров\r\n\t- может фоточки, может инструкция как добраться\r\n\t- возможно форма для того чтоб можно было быстро отправить письмо, или запросить обратный звонок\r\n\t- реквизиты компании (название ооо, инн, кпп и т.д.)\r\n*/","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Carousel extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='container-fluid' style={ { height: '100%' } }>\r\n                <div className='row' style={ { height: '100%' } }>\r\n                    <div className='col carousel-items-block' style={ { height: '100%' } }>\r\n                        <div id=\"carousel-items\" className='carousel slide' data-ride='carousel'>\r\n                            { this.getIndicators() }\r\n                            { this.getSlides() }\r\n                            { this.getControls() }\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    getIndicators = () => {\r\n        const numberOfSlides = this.getNumberOfSlides();\r\n        let indices = Array.from(new Array(numberOfSlides), (value, index)=> index);\r\n        let indicatorList = indices.map(function (index) {\r\n            return (\r\n                <li key={ index } data-target='#carousel-items' data-slide-to={ index } className={ index === 0 ? 'active' : ''}></li>\r\n            );\r\n        });\r\n        return (\r\n            <ol className='carousel-indicators'>\r\n                { indicatorList }\r\n            </ol>\r\n        );\r\n    };\r\n    getNumberOfSlides = () => {\r\n        const numberOfItemsPerSlide = this.props.numberOfRows * this.props.numberOfColumns;\r\n\r\n        const totalNumberOfItems = this.getTotalNumberOfItems();\r\n\r\n        let numberOfSlides = Math.floor(totalNumberOfItems/ numberOfItemsPerSlide);\r\n        if(totalNumberOfItems % numberOfItemsPerSlide !== 0)\r\n            numberOfSlides++;\r\n\r\n        return numberOfSlides;\r\n    };\r\n    getTotalNumberOfItems = () => {\r\n        if(this.props.items == null)\r\n            return 0;\r\n        return this.props.items.length;\r\n    };\r\n    getSlides = () => {\r\n        let slides = [];\r\n        for(let slideCounter = 0; slideCounter < this.getNumberOfSlides(); ++slideCounter) {\r\n            let slide = {\r\n                id: slideCounter,\r\n                rows: this.getRows(slideCounter)\r\n            };\r\n            slides.push(slide);\r\n        }\r\n\r\n        let slideList = slides.map(this.mapSlides);\r\n\r\n        return (\r\n            <div className='carousel-inner' role='listbox'>\r\n                { slideList }\r\n            </div>\r\n        );\r\n    };\r\n    getRows = (slideCounter) => {\r\n        let rows = [];\r\n\r\n        for(let rowCounter = 0; rowCounter < this.props.numberOfRows; ++rowCounter) {\r\n            let row = {\r\n                id: rowCounter,\r\n                columns: this.getColumns(slideCounter, rowCounter)\r\n            };\r\n            rows.push(row);\r\n        }\r\n\r\n        return rows;\r\n    };\r\n    getColumns = (slideCounter, rowCounter) => {\r\n        let columns = [];\r\n        let itemsPassed = (slideCounter * this.props.numberOfRows + rowCounter) * this.props.numberOfColumns;\r\n\r\n        for(let columnCounter = 0; columnCounter < this.props.numberOfColumns; ++columnCounter) {\r\n            var currentItemId = itemsPassed + columnCounter;\r\n            var column = {\r\n                id: columnCounter,\r\n                itemId: currentItemId\r\n            };\r\n            columns.push(column);\r\n        }\r\n\r\n        return columns;\r\n    };\r\n    mapSlides = (slide) => {\r\n        let rowList = slide.rows.map(this.mapRows);\r\n        return (\r\n            <div className={ ( slide.id === 0 ? 'active ' : '') + 'item carousel-item-layout'} key={ slide.id }>\r\n                { rowList }\r\n            </div>\r\n        );\r\n    };\r\n    mapRows = (row) => {\r\n        let columnList = row.columns.map(this.mapColumns);\r\n        return (\r\n            <div className='row' key={ row.id }>\r\n                { columnList }\r\n            </div>\r\n        );\r\n    };\r\n    mapColumns = (column) => {\r\n        let itemData = column.itemId < this.getTotalNumberOfItems() ? this.props.items[column.itemId] : null;\r\n        return (\r\n            <div className='col-sm-4' key={ column.id }>\r\n                { this.props.renderItem(itemData) }\r\n            </div>\r\n        );\r\n    };\r\n    getControls = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <a className='left carousel-control' href='#carousel-items' role='button' data-slide='prev'>\r\n                    <span className='glyphicon glyphicon-chevron-left' aria-hidden='true'></span>\r\n                </a>\r\n                <a className='right carousel-control' href='#carousel-items' role='button' data-slide='next'>\r\n                    <span className='glyphicon glyphicon-chevron-right' aria-hidden='true'></span>\r\n                </a>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n}\r\n\r\nCarousel.propTypes = {\r\n    numberOfRows: PropTypes.number.isRequired,\r\n    numberOfColumns: PropTypes.number.isRequired,\r\n    items: PropTypes.array.isRequired,\r\n    renderItem: PropTypes.func.isRequired\r\n};\r\n\r\nexport { Carousel };\r\n","let ContentType = Object.freeze({\r\n    Video: 'Video',\r\n    Photo: 'Photo'\r\n});\r\n\r\nclass Project {\r\n    constructor() {\r\n        this.IsHidden = false;\r\n        this.OrdinalNumber = 0;\r\n        this.Path = '';\r\n        this.ThumbnailImage = '';\r\n        this.Name = '';\r\n        this.Description = '';\r\n        this.Tags = [];\r\n        this.Date = new Date();\r\n        this.Content = [];\r\n    }\r\n}\r\n\r\nexport { Project, ContentType };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Project } from '../InternalDataTypes/Project';\r\nimport { Link } from 'react-router-dom';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport {ActionTypes, Analytics} from '../Analytics';\r\n\r\nclass ProjectThumbnail extends React.Component {\r\n    render() {\r\n        const project = this.props.project;\r\n        const projectPath = process.env.PUBLIC_URL + SectionPathEnum.Portfolio + project.Path;\r\n        return (\r\n            <div className='container-fluid project-thumbnail'>\r\n                <Link\r\n                    to={ projectPath }\r\n                    onClick={ () => {\r\n                        Analytics.pageChanged(projectPath);\r\n                        Analytics.fireEvent(ActionTypes.LinkClicked, 'Portfolio project \\'' + project.Path + '\\'');\r\n                    } }\r\n                >\r\n                        <img src={ process.env.PUBLIC_URL + project.ThumbnailImage } alt={ project.Name } />\r\n                        <p>{ project.Name }</p>\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nProjectThumbnail.propTypes = {\r\n    project: PropTypes.instanceOf(Project).isRequired\r\n};\r\n\r\nexport { ProjectThumbnail };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Carousel } from '../common/Carousel';\r\nimport { ProjectThumbnail } from '../common/ProjectThumbnail';\r\nimport { Project } from '../InternalDataTypes/Project';\r\n\r\nclass PortfolioPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Portfolio);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Портфолио</h1>\r\n                <Carousel numberOfRows={ 2 } numberOfColumns={ 3 } items={ webSiteStructure.Projects } renderItem={ this.renderProjectThumbnail }/>\r\n            </div>\r\n        );\r\n    }\r\n    renderProjectThumbnail = (projectData) => {\r\n        return (<ProjectThumbnail project={ Object.assign(new Project(), projectData) }/>);\r\n    };\r\n}\r\n\r\nPortfolioPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired\r\n};\r\n\r\nexport { PortfolioPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass ServicesPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Services);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Услуги</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nServicesPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired\r\n};\r\n\r\nexport { ServicesPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass ClientsPage extends React.Component {\r\n    getClientLogos = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const logos = webSiteStructure.getListOfClientLogos();\r\n\r\n        const logoList = logos.map(logo => {\r\n            return (\r\n                <img key={ logo.OrdinalNumber } className='client-logo' src={ process.env.PUBLIC_URL + logo.PathToImage } alt={ logo.Name } />\r\n            );\r\n        });\r\n        return (<div>{ logoList }</div>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Clients);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Наши клиенты</h1>\r\n                <p>можно пару слов о том какие у нас крутые клиенты, какие они респектабельные, какие мы респектабельные и надёжные, мол нам доверяют</p>\r\n                <h2>Нам доверяют:</h2>\r\n                { this.getClientLogos() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nClientsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired\r\n};\r\n\r\nexport { ClientsPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass NewsPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.News);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Новости</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNewsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired\r\n};\r\n\r\nexport { NewsPage };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass NotFoundPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Страница не найдена</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNotFoundPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired\r\n};\r\n\r\nexport { NotFoundPage };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport { Carousel } from '../common/Carousel';\r\nimport { ContentType } from '../InternalDataTypes/Project';\r\n\r\nclass ProjectPage extends React.Component {\r\n    render() {\r\n        const projectUrl = window.location.href;\r\n        const portfolioUrl = process.env.PUBLIC_URL + SectionPathEnum.Portfolio;\r\n        const path = projectUrl.slice(projectUrl.indexOf(portfolioUrl) + portfolioUrl.length);\r\n        const project = this.props.webSiteStructure.getProjectByPath(path);\r\n\r\n        if(!project)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ project.Name }</h1>\r\n                <p>{ project.Description }</p>\r\n                <Carousel numberOfRows={ 1 } numberOfColumns={ 1 } items={ project.Content } renderItem={ this.renderContent }/>\r\n            </div>\r\n        );\r\n    }\r\n    renderContent = (content) => {\r\n        switch(content.ContentType) {\r\n            case ContentType.Video:\r\n                return (\r\n                    <div className='content-fluid project-thumbnail'>\r\n                        <iframe id='player' type='text/html' width='640' height='360'\r\n                                src={ content.Link }\r\n                                frameBorder='0'></iframe>\r\n                        <p>{ content.Name }</p>\r\n                    </div>\r\n                );\r\n            case ContentType.Photo:\r\n                return (\r\n                    <div className='content-fluid project-thumbnail'>\r\n                        <img style={ { width: '100%', height: '100%'} } src={ process.env.PUBLIC_URL + content.Link } alt={ content.Name } />\r\n                        <p>{ content.Name }</p>\r\n                    </div>\r\n                );\r\n            default:\r\n                console.error('unknown content type');\r\n\r\n        }\r\n    };\r\n}\r\n\r\nProjectPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired\r\n};\r\n\r\nexport { ProjectPage };\r\n","import React from 'react';\r\nimport { MainPage } from '../sections/MainPage';\r\nimport { CompanyPage } from '../sections/CompanyPage';\r\nimport { ContactsPage } from '../sections/ContactsPage';\r\nimport { PortfolioPage } from '../sections/PortfolioPage';\r\nimport { ServicesPage } from '../sections/ServicesPage';\r\nimport { ClientsPage } from '../sections/ClientsPage';\r\nimport { NewsPage } from '../sections/NewsPage';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { NotFoundPage } from '../sections/NotFoundPage';\r\nimport { ProjectPage } from '../sections/ProjectPage';\r\n\r\nclass MainContent extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        return (\r\n            <div className='container-fluid main-content'>\r\n                <Switch>\r\n                    <Route exact path={ process.env.PUBLIC_URL + '/' }                          render={() => ( <MainPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Main }         render={() => ( <MainPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Company }      render={() => ( <CompanyPage    webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Contacts }     render={() => ( <ContactsPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route exact path={ process.env.PUBLIC_URL + SectionPathEnum.Portfolio }    render={() => ( <PortfolioPage  webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Portfolio }    render={() => ( <ProjectPage    webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Services }     render={() => ( <ServicesPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Clients }      render={() => ( <ClientsPage    webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.News }         render={() => ( <NewsPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.NotFound }     render={() => ( <NotFoundPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route render={() => ( <Redirect to={ process.env.PUBLIC_URL + SectionPathEnum.NotFound } /> )} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMainContent.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure).isRequired\r\n};\r\n\r\nexport { MainContent };\r\n","import React, { Component } from 'react';\nimport { WebSiteStructure } from './WebSiteStructure';\nimport { Header } from './common/Header';\nimport { Footer } from './common/Footer';\n//import { NavigationBar } from './common/NavigationBar';\nimport { MainContent } from './common/MainContent';\nimport './main.css';\nimport { SectionPathEnum } from './SectionPathEnum';\nimport {CompanyInfo} from \"./InternalDataTypes/CompanyInfo\";\nimport {CompanyRequisites} from \"./InternalDataTypes/CompanyRequisites\";\n\nclass App extends Component {\n    state = {\n        webSiteStructure: null,\n        currentSection: SectionPathEnum.Main\n    };\n    sectionChanged = (section) => {\n        this.setState({ currentSection: section });\n    };\n    componentDidMount() {\n        fetch('data.json')\n            .then(response => response.json())\n            .then(data => {\n                let parsedData = Object.assign(new WebSiteStructure(), data);\n                parsedData.CompanyInfo = Object.assign(new CompanyInfo(), parsedData.CompanyInfo);\n                parsedData.CompanyRequisites = Object.assign(new CompanyRequisites(), parsedData.CompanyRequisites);\n                this.setState({ webSiteStructure: parsedData });\n            });\n    }\n    render() {\n        const { webSiteStructure, currentSection } = this.state;\n        return (\n            <div className='container-fluid' style={ { padding: '0px' } }>\n                <div className='App'>\n                    { webSiteStructure && (<Header webSiteStructure={ webSiteStructure } currentSection={ currentSection } sectionChanged={ this.sectionChanged } />) }\n                    { webSiteStructure && (<MainContent webSiteStructure={ webSiteStructure }/>) }\n                    { webSiteStructure && (<Footer webSiteStructure={ webSiteStructure } currentSection={ currentSection } sectionChanged={ this.sectionChanged } />) }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render((\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    ), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}