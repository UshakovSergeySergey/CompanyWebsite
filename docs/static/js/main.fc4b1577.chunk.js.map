{"version":3,"sources":["WebSiteStructure.js","SectionPathEnum.js","common/Header.js","common/Footer.js","sections/MainPage.js","EmployeeData.js","Employee.js","sections/CompanyPage.js","Map.js","sections/ContactsPage.js","sections/PortfolioPage.js","sections/ServicesPage.js","sections/ClientsPage.js","sections/NewsPage.js","sections/NotFoundPage.js","common/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["WebSiteStructure","_this","this","Object","classCallCheck","getCompanyName","getCompanyYearsOfExistence","getListOfSections","sections","WebSiteSections","filter","site","IsHidden","sort","a","b","OrdinalNumber","getListOfSocialMedia","links","LinksToSocialMedia","link","getListOfClientLogos","logos","ClientsPage","ClientLogos","client","getListOfKeyEmployees","employees","CompanyPage","KeyEmployees","employee","sectionIsVisible","sectionLink","section","find","Link","getCompanyPhoneNumber","CompanyPhoneNumber","getCompanyEmail","CompanyEmail","getCompanyLegalAddress","CompanyLegalAddress","getCompanyOfficeAddress","CompanyOfficeAddress","getCompanyMailCorrespondenceAddress","CompanyMailCorrespondenceAddress","getCompanyFaxNumber","CompanyFaxNumber","getCompanyWorkingHours","CompanyWorkingHours","MainPage","ContactsPage","PortfolioPage","ServicesPage","NewsPage","NotFoundPage","SectionPathEnum","freeze","Main","Company","Contacts","Portfolio","Services","Clients","News","NotFound","Header","state","navigationBar","sticky","handleScroll","_this$state","window","pageYOffset","classList","add","remove","getLinksToSections","webSiteStructure","props","currentSection","sectionList","map","isActive","react_default","createElement","className","key","to","process","onClick","e","sectionChanged","Name","addEventListener","bar","document","getElementById","stickyValue","offsetTop","setState","Fragment","style","height","width","src","alt","href","id","zIndex","type","data-toggle","data-target","React","Component","Footer","getLinksToSocialMedia","linkList","target","rel","Icon","linkRows","start","end","length","push","slice","rowList","row","index","color","paddingTop","lineHeight","borderColor","textAlign","Caption","Redirect","EmployeeData","Photo","Position","PhoneNumber","Email","Employee","data","float","getKeyEmployees","employeeList","Employee_Employee","assign","Text","AnyReactComponent","_ref","text","Map","lib_default","defaultCenter","center","defaultZoom","zoom","Map_AnyReactComponent","lat","lng","defaultProps","Map_Map","getClientLogos","logoList","logo","MainContent","Switch","Route","exact","path","render","MainPage_MainPage","CompanyPage_CompanyPage","ContactsPage_ContactsPage","PortfolioPage_PortfolioPage","ServicesPage_ServicesPage","ClientsPage_ClientsPage","NewsPage_NewsPage","NotFoundPage_NotFoundPage","App","_this2","fetch","then","response","json","padding","Header_Header","MainContent_MainContent","Footer_Footer","Boolean","location","hostname","match","ReactDOM","BrowserRouter","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc4b1577.chunk.js","sourcesContent":["class WebSiteStructure {\r\n    constructor() {\r\n        this.CompanyPhoneNumber = '';\r\n        this.CompanyEmail = '';\r\n        this.CompanyLegalAddress = '';\r\n        this.CompanyOfficeAddress = '';\r\n        this.CompanyMailCorrespondenceAddress = '';\r\n        this.CompanyFaxNumber = '';\r\n        this.CompanyWorkingHours = '';\r\n        this.WebSiteSections = [];\r\n        this.LinksToSocialMedia = [];\r\n\r\n        this.MainPage = {};\r\n        this.CompanyPage = {};\r\n        this.ContactsPage = {};\r\n        this.PortfolioPage = {};\r\n        this.ServicesPage = {};\r\n        this.ClientsPage = {};\r\n        this.NewsPage = {};\r\n        this.NotFoundPage = {};\r\n    }\r\n    getCompanyName = () => {\r\n        return 'ООО «Наша Компания»';\r\n    };\r\n    getCompanyYearsOfExistence = () => {\r\n        return '2018';\r\n    };\r\n    getListOfSections = () => {\r\n        let sections = this.WebSiteSections.filter(site => !site.IsHidden);\r\n        sections.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return sections;\r\n    };\r\n    getListOfSocialMedia = () => {\r\n        let links = this.LinksToSocialMedia.filter(link => !link.IsHidden);\r\n        links.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return links;\r\n    };\r\n    getListOfClientLogos = () => {\r\n        let logos = this.ClientsPage.ClientLogos.filter(client => !client.IsHidden);\r\n        logos.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return logos;\r\n    };\r\n    getListOfKeyEmployees = () => {\r\n        let employees = this.CompanyPage.KeyEmployees.filter(employee => !employee.IsHidden);\r\n        employees.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return employees;\r\n    };\r\n    sectionIsVisible = (sectionLink) => {\r\n        let section = this.WebSiteSections.find(section => section.Link === sectionLink);\r\n        if(section)\r\n            return !section.IsHidden;\r\n        return false;\r\n    };\r\n    getCompanyPhoneNumber = () => {\r\n        return this.CompanyPhoneNumber;\r\n    };\r\n    getCompanyEmail = () => {\r\n        return this.CompanyEmail;\r\n    };\r\n    getCompanyLegalAddress = () => {\r\n        return this.CompanyLegalAddress;\r\n    };\r\n    getCompanyOfficeAddress = () => {\r\n        return this.CompanyOfficeAddress;\r\n    };\r\n    getCompanyMailCorrespondenceAddress = () => {\r\n        return this.CompanyMailCorrespondenceAddress;\r\n    };\r\n    getCompanyFaxNumber = () => {\r\n        return this.CompanyFaxNumber;\r\n    };\r\n    getCompanyWorkingHours = () => {\r\n        return this.CompanyWorkingHours;\r\n    };\r\n}\r\n\r\nexport { WebSiteStructure };\r\n","let SectionPathEnum = Object.freeze({\r\n    Main: '/main',\r\n    Company: '/company',\r\n    Contacts: '/contacts',\r\n    Portfolio: '/portfolio',\r\n    Services: '/services',\r\n    Clients: '/clients',\r\n    News: '/news',\r\n    NotFound: '/pageNotFound'\r\n});\r\n\r\nexport { SectionPathEnum };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Link } from 'react-router-dom';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\n\r\nclass Header extends React.Component {\r\n    state = {\r\n        navigationBar: null,\r\n        sticky: null\r\n    };\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.handleScroll);\r\n        let bar = document.getElementById('header-navigation-bar');\r\n        let stickyValue = bar.offsetTop;\r\n        this.setState({ navigationBar: bar, sticky: stickyValue});\r\n    }\r\n    handleScroll = () => {\r\n        const { navigationBar, sticky } = this.state;\r\n        if(window.pageYOffset >= sticky)\r\n            navigationBar.classList.add('sticky');\r\n        else\r\n            navigationBar.classList.remove('sticky');\r\n    };\r\n    getLinksToSections = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const currentSection = this.props.currentSection;\r\n        const sections = webSiteStructure.getListOfSections();\r\n        const sectionList = sections.map(section => {\r\n            const isActive = currentSection === section.Link ? 'active' : '';\r\n            let sectionChanged = (e) => {\r\n                this.props.sectionChanged(section.Link);\r\n            };\r\n            return (\r\n                <li className={ isActive } key={ section.OrdinalNumber }>\r\n                    <Link to={ process.env.PUBLIC_URL + section.Link } onClick={ sectionChanged }>{ section.Name }</Link>\r\n                </li>\r\n            );\r\n        });\r\n        return (\r\n            <ul className='nav navbar-nav navbar-right'>\r\n                { sectionList }\r\n            </ul>\r\n        );\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        return (\r\n            <React.Fragment>\r\n                <div className='navbar-default'>\r\n                    <div className='row'>\r\n                        <div className='col-xs-8'>\r\n                            <Link to={ process.env.PUBLIC_URL + SectionPathEnum.Main }>\r\n                                <img className='navbar-brand' style={ { height: '128px', width: '128px' } } src='logo.svg' alt={ webSiteStructure.getCompanyName() } />\r\n                            </Link>\r\n                        </div>\r\n                        <div className='col-xs-4 header-contacts'>\r\n                            <div className='row'>\r\n                                <a href={ 'tel:' + webSiteStructure.getCompanyPhoneNumber() }>{ webSiteStructure.getCompanyPhoneNumber() }</a>\r\n                            </div>\r\n                            <div className='row'>\r\n                                <a href={ 'mailto:' + webSiteStructure.getCompanyEmail() }>{ webSiteStructure.getCompanyEmail() }</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <nav id='header-navigation-bar' className='navbar navbar-inverse' style={ { zIndex: 99 } }>\r\n                    <div className='container-fluid'>\r\n                        <div className='navbar-header'>\r\n                            <button type='button' className='navbar-toggle' data-toggle='collapse' data-target='#header-navbar'>\r\n                                <span className='icon-bar'></span>\r\n                                <span className='icon-bar'></span>\r\n                                <span className='icon-bar'></span>\r\n                            </button>\r\n                            <Link className='navbar-brand' to={ process.env.PUBLIC_URL + SectionPathEnum.Main }>{ webSiteStructure.getCompanyName() }</Link>\r\n                        </div>\r\n\r\n                        <div className='collapse navbar-collapse' id='header-navbar'>\r\n                            { this.getLinksToSections() }\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure),\r\n    currentSection: PropTypes.string.isRequired,\r\n    sectionChanged: PropTypes.func.isRequired\r\n};\r\n\r\nexport { Header };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends React.Component {\r\n    getLinksToSections = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const currentSection = this.props.currentSection;\r\n        const sections = webSiteStructure.getListOfSections();\r\n        const sectionList = sections.map(section => {\r\n            let isActive = '';\r\n            if(currentSection === section.Link)\r\n                isActive = ' active';\r\n            let sectionChanged = (e) => {\r\n                this.props.sectionChanged(section.Link);\r\n            };\r\n            return (\r\n                <li className={ 'footer-nav-element' + isActive } key={ section.OrdinalNumber }>\r\n                    <Link className='footer-nav-element-selected' to={ process.env.PUBLIC_URL + section.Link } onClick={ sectionChanged }>{ section.Name }</Link>\r\n                </li>);\r\n        });\r\n        return (<ul className='nav navbar-nav'>{ sectionList }</ul>);\r\n    };\r\n    getLinksToSocialMedia = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const links = webSiteStructure.getListOfSocialMedia();\r\n        const linkList = links.map(link => {\r\n            return (\r\n                <a key={ link.OrdinalNumber } href={ link.Link } target='_blank' rel='noopener noreferrer'>\r\n                    <img className='social-media-icon' src={ process.env.PUBLIC_URL + link.Icon } alt={ link.Link }/>\r\n                </a>\r\n            );\r\n        });\r\n\r\n        const chunkSize = 5;\r\n        let linkRows = [];\r\n        for(let start = 0, end = linkList.length; start < end; start += chunkSize)\r\n            linkRows.push(linkList.slice(start, start + chunkSize));\r\n\r\n        const rowList = linkRows.map((row, index) => {\r\n            return (<div className='row' key={ index }>{ row }</div>);\r\n        });\r\n\r\n        return (<React.Fragment>{ rowList }</React.Fragment>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        return (\r\n            <div id='footer-block'>\r\n                <div style={ { color: '#9d9d9d' } }>\r\n                    <div className='row' style={ { paddingTop: '30px' } }>\r\n                        <div className='col-xs-6' style={ { lineHeight: 1.8 } }>\r\n                            <div className='row'>{ webSiteStructure.getCompanyName() }</div>\r\n                            <div className='row'>{ webSiteStructure.getCompanyLegalAddress() }</div>\r\n                            <div className='row footer-contacts'><a href={ 'mailto:' + webSiteStructure.getCompanyEmail() }>{ webSiteStructure.getCompanyEmail() }</a></div>\r\n                            <div className='row footer-contacts'><a href={ 'tel:' + webSiteStructure.getCompanyPhoneNumber() }>{ webSiteStructure.getCompanyPhoneNumber() }</a></div>\r\n                            <div className='row'>\r\n                                { this.getLinksToSocialMedia() }\r\n                            </div>\r\n                        </div>\r\n                        <div className='col-xs-3'>\r\n                        </div>\r\n                        <div className='col-xs-3'>\r\n                            <div className='navbar navbar-inverse navbar-stacked' style={ { borderColor: 'transparent' } }>\r\n                                { this.getLinksToSections() }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row' style={ { lineHeight: 3.8, textAlign: 'center' } }>© { webSiteStructure.getCompanyYearsOfExistence() } { webSiteStructure.getCompanyName() }</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFooter.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure),\r\n    currentSection: PropTypes.string.isRequired,\r\n    sectionChanged: PropTypes.func.isRequired\r\n};\r\n\r\nexport { Footer };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass MainPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Main);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ webSiteStructure.MainPage.Caption }</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMainPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { MainPage };\r\n","class EmployeeData {\r\n    constructor() {\r\n        this.OrdinalNumber = 0;\r\n        this.IsHidden = false;\r\n        this.Photo = '';\r\n        this.Name = '';\r\n        this.Position = '';\r\n        this.PhoneNumber = '';\r\n        this.Email = '';\r\n    }\r\n}\r\n\r\nexport { EmployeeData };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { EmployeeData } from './EmployeeData';\r\n\r\nclass Employee extends React.Component {\r\n    render() {\r\n        const data = this.props.data;\r\n\r\n        return (\r\n            <div>\r\n                <div style={ { float: 'left' } }>\r\n                    <img style={ { height: '128px', width: '128px' } } src={ process.env.PUBLIC_URL + data.Photo } alt={ data.Name }/>\r\n                </div>\r\n                <div>\r\n                    <p><b>ФИО:</b> { data.Name }</p>\r\n                    <p><b>Должность:</b> { data.Position }</p>\r\n                    <p><b>Телефон:</b> { data.PhoneNumber }</p>\r\n                    <p><b>Почта:</b> { data.Email }</p>\r\n                    <br /><br />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nEmployee.propTypes = {\r\n    data: PropTypes.instanceOf(EmployeeData)\r\n};\r\n\r\nexport { Employee };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Employee } from '../Employee';\r\nimport { EmployeeData } from '../EmployeeData';\r\n\r\nclass CompanyPage extends React.Component {\r\n    getKeyEmployees = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const employees = webSiteStructure.getListOfKeyEmployees();\r\n\r\n        const employeeList = employees.map(employee => {\r\n            return (\r\n                <Employee key={ employee.OrdinalNumber } data={ Object.assign(new EmployeeData(), employee) } />\r\n            );\r\n        });\r\n        return (<div>{ employeeList }</div>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Company);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ webSiteStructure.CompanyPage.Caption }</h1>\r\n                <p>{ webSiteStructure.CompanyPage.Text }</p>\r\n                { this.getKeyEmployees() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCompanyPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { CompanyPage };\r\n","import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nconst AnyReactComponent = ({ text }) => <div id='map-office-label'>{text}</div>;\r\n\r\nclass Map extends Component {\r\n    static defaultProps = {\r\n        center: {\r\n            lat: 55.871203,\r\n            lng: 37.658275\r\n        },\r\n        zoom: 17\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            // Important! Always set the container height explicitly\r\n            <div style={{ height: '500px', width: '100%' }}>\r\n                <GoogleMapReact\r\n                    defaultCenter={this.props.center}\r\n                    defaultZoom={this.props.zoom}\r\n                >\r\n                    <AnyReactComponent\r\n                        lat={55.871203}\r\n                        lng={37.658275}\r\n                        text={'Наш офис'}\r\n                    />\r\n                </GoogleMapReact>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Map };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Map } from '../Map';\r\n\r\nclass ContactsPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Contacts);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ webSiteStructure.ContactsPage.Caption }</h1>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Юридический телефон:</td>\r\n                            <td>{ webSiteStructure.getCompanyPhoneNumber() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Факс:</td>\r\n                            <td>{ webSiteStructure.getCompanyFaxNumber() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Юридический адрес:</td>\r\n                            <td>{ webSiteStructure.getCompanyLegalAddress() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Адрес офиса:</td>\r\n                            <td>{ webSiteStructure.getCompanyOfficeAddress() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Почтовый адрес:</td>\r\n                            <td>{ webSiteStructure.getCompanyMailCorrespondenceAddress() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Время работы:</td>\r\n                            <td>{ webSiteStructure.getCompanyWorkingHours() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Адрес электронной почты:</td>\r\n                            <td>{ webSiteStructure.getCompanyEmail() }</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <Map />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nContactsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { ContactsPage };\r\n\r\n/*\r\n    - телефон наш или менеджеров\r\n\t- может фоточки, может инструкция как добраться\r\n\t- возможно форма для того чтоб можно было быстро отправить письмо, или запросить обратный звонок\r\n\t- реквизиты компании (название ооо, инн, кпп и т.д.)\r\n*/","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass PortfolioPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Portfolio);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ webSiteStructure.PortfolioPage.Caption }</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPortfolioPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { PortfolioPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass ServicesPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Services);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ webSiteStructure.ServicesPage.Caption }</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nServicesPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { ServicesPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass ClientsPage extends React.Component {\r\n    getClientLogos = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const logos = webSiteStructure.getListOfClientLogos();\r\n\r\n        const logoList = logos.map(logo => {\r\n            return (\r\n                <img key={ logo.OrdinalNumber } className='client-logo' src={ process.env.PUBLIC_URL + logo.Icon } alt='missing text' />\r\n            );\r\n        });\r\n        return (<div>{ logoList }</div>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Clients);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ webSiteStructure.ClientsPage.Caption }</h1>\r\n                <p>{ webSiteStructure.ClientsPage.Text }</p>\r\n                <h2>Нам доверяют:</h2>\r\n                { this.getClientLogos() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nClientsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { ClientsPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass NewsPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.News);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ webSiteStructure.NewsPage.Caption }</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNewsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { NewsPage };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass NotFoundPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        return (\r\n            <div>\r\n                <h1>{ webSiteStructure.NotFoundPage.Caption }</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNotFoundPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { NotFoundPage };\r\n","import React from 'react';\r\nimport { MainPage } from '../sections/MainPage';\r\nimport { CompanyPage } from '../sections/CompanyPage';\r\nimport { ContactsPage } from '../sections/ContactsPage';\r\nimport { PortfolioPage } from '../sections/PortfolioPage';\r\nimport { ServicesPage } from '../sections/ServicesPage';\r\nimport { ClientsPage } from '../sections/ClientsPage';\r\nimport { NewsPage } from '../sections/NewsPage';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { NotFoundPage } from '../sections/NotFoundPage';\r\n\r\nclass MainContent extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        return (\r\n            <div className='container-fluid main-content'>\r\n                <Switch>\r\n                    <Route exact path={ process.env.PUBLIC_URL + '/' }                          render={() => ( <MainPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Main }         render={() => ( <MainPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Company }      render={() => ( <CompanyPage    webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Contacts }     render={() => ( <ContactsPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Portfolio }    render={() => ( <PortfolioPage  webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Services }     render={() => ( <ServicesPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Clients }      render={() => ( <ClientsPage    webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.News }         render={() => ( <NewsPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.NotFound }     render={() => ( <NotFoundPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route render={() => ( <Redirect to={ process.env.PUBLIC_URL + SectionPathEnum.NotFound } /> )} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMainContent.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { MainContent };\r\n","import React, { Component } from 'react';\nimport { WebSiteStructure } from './WebSiteStructure';\nimport { Header } from './common/Header';\nimport { Footer } from './common/Footer';\n//import { NavigationBar } from './common/NavigationBar';\nimport { MainContent } from './common/MainContent';\nimport './main.css';\nimport { SectionPathEnum } from './SectionPathEnum';\n\nclass App extends Component {\n    state = {\n        webSiteStructure: null,\n        currentSection: SectionPathEnum.Main\n    };\n    sectionChanged = (section) => {\n        this.setState({ currentSection: section });\n    };\n    componentDidMount() {\n        fetch('data.json')\n            .then(response => response.json())\n            .then(data => this.setState(\n                { webSiteStructure: Object.assign(new WebSiteStructure(), data) })\n            );\n    }\n    render() {\n        const { webSiteStructure, currentSection } = this.state;\n        return (\n            <div className='container-fluid' style={ { padding: '0px' } }>\n                <div className='App'>\n                    { webSiteStructure && (<Header webSiteStructure={ webSiteStructure } currentSection={ currentSection } sectionChanged={ this.sectionChanged } />) }\n                    { /* webSiteStructure && (<NavigationBar webSiteStructure={ webSiteStructure } />) */ }\n                    { webSiteStructure && (<MainContent webSiteStructure={ webSiteStructure }/>) }\n                    { webSiteStructure && (<Footer webSiteStructure={ webSiteStructure } currentSection={ currentSection } sectionChanged={ this.sectionChanged } />) }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render((\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    ), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}