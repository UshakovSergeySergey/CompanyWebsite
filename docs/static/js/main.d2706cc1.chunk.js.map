{"version":3,"sources":["InternalDataTypes/Address.js","InternalDataTypes/CompanyInfo.js","InternalDataTypes/CompanyRequisites.js","WebSiteStructure.js","SectionPathEnum.js","InternalDataTypes/Prettifier.js","common/Header.js","common/Footer.js","sections/MainPage.js","EmployeeData.js","Employee.js","sections/CompanyPage.js","Map.js","sections/ContactsPage.js","sections/PortfolioPage.js","sections/ServicesPage.js","sections/ClientsPage.js","sections/NewsPage.js","sections/NotFoundPage.js","common/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["Address","Object","classCallCheck","this","Latitude","Longitude","Zoom","MapLabel","CompanyInfo","_this","getPhoneNumber","PhoneNumber","getFaxNumber","FaxNumber","getEmail","EMail","getName","Name","getLegalAddress","LegalAddress","getOfficeAddress","OfficeAddress","getCorrespondenceAddress","CorrespondenceAddress","getWorkingHours","WorkingHours","getFoundationYear","FoundationYear","RequisiteName","freeze","TaxIdentificationNumber","RegistrationReasonCode","CheckingAccount","CorrespondentAccount","BankIdentificationCode","PrimaryStateRegistrationNumber","IdentifierOfEnterprisesAndOrganizations","CompanyRequisites","getTaxIdentificationNumber","getRegistrationReasonCode","getCheckingAccount","getCorrespondentAccount","getBankIdentificationCode","getPrimaryStateRegistrationNumber","getIdentifierOfEnterprisesAndOrganizations","WebSiteStructure","getCompanyInfo","getCompanyRequisites","getListOfSections","sections","Sections","filter","site","IsHidden","sort","a","b","OrdinalNumber","getListOfSocialMedia","links","SocialMedias","link","getListOfClientLogos","logos","Clients","client","getListOfKeyEmployees","employees","Employees","employee","sectionIsVisible","sectionPath","section","find","Path","SectionPathEnum","Main","Company","Contacts","Portfolio","Services","News","NotFound","Prettifier","prettifyPhoneNumber","rawPhoneNumber","substring","Header","state","navigationBar","sticky","handleScroll","_this$state","window","pageYOffset","classList","add","remove","getLinksToSections","webSiteStructure","props","currentSection","sectionList","map","isActive","react_default","createElement","className","key","Link","to","process","onClick","e","sectionChanged","addEventListener","bar","document","getElementById","stickyValue","offsetTop","setState","companyInfo","phoneNumberRaw","phoneNumberPretty","companyName","email","Fragment","style","height","width","src","alt","href","id","zIndex","type","data-toggle","data-target","React","Component","Footer","getLinksToSocialMedia","linkList","target","rel","PathToImage","linkRows","start","end","length","push","slice","rowList","row","index","legalAddress","foundationYear","currentYear","Date","getFullYear","yearsOfExistence","color","paddingTop","lineHeight","borderColor","textAlign","MainPage","Redirect","EmployeeData","Photo","Position","Employee","data","float","PathToPhoto","FullName","CompanyPage","getKeyEmployees","employeeList","Employee_Employee","assign","AnyReactComponent","_ref","text","Map","address","lib_default","defaultCenter","lat","lng","defaultZoom","Map_AnyReactComponent","ContactsPage","faxNumberRaw","faxNumberPretty","officeAddress","correspondenceAddress","workingHours","requisites","Map_Map","PortfolioPage","ServicesPage","ClientsPage","getClientLogos","logoList","logo","NewsPage","NotFoundPage","MainContent","Switch","Route","exact","path","render","MainPage_MainPage","CompanyPage_CompanyPage","ContactsPage_ContactsPage","PortfolioPage_PortfolioPage","ServicesPage_ServicesPage","ClientsPage_ClientsPage","NewsPage_NewsPage","NotFoundPage_NotFoundPage","App","_this2","fetch","then","response","json","parsedData","padding","Header_Header","MainContent_MainContent","Footer_Footer","Boolean","location","hostname","match","ReactDOM","BrowserRouter","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2706cc1.chunk.js","sourcesContent":["class Address {\r\n    constructor() {\r\n        this.Address = '';\r\n        this.Latitude = 0;\r\n        this.Longitude = 0;\r\n        this.Zoom = 1;\r\n        this.MapLabel = '';\r\n    }\r\n}\r\n\r\nexport { Address };\r\n","import { Address } from './Address';\r\n\r\nclass CompanyInfo {\r\n    constructor() {\r\n        this.PhoneNumber = '';\r\n        this.FaxNumber = '';\r\n        this.EMail = '';\r\n        this.Name = '';\r\n        this.LegalAddress = new Address();\r\n        this.OfficeAddress = new Address();\r\n        this.CorrespondenceAddress = new Address();\r\n        this.WorkingHours = '';\r\n        this.FoundationYear = 2018;\r\n    }\r\n    getPhoneNumber = () => {\r\n        return this.PhoneNumber;\r\n    };\r\n    getFaxNumber = () => {\r\n        return this.FaxNumber;\r\n    };\r\n    getEmail = () => {\r\n        return this.EMail;\r\n    };\r\n    getName = () => {\r\n        return this.Name;\r\n    };\r\n    getLegalAddress = () => {\r\n        return this.LegalAddress;\r\n    };\r\n    getOfficeAddress = () => {\r\n        return this.OfficeAddress;\r\n    };\r\n    getCorrespondenceAddress = () => {\r\n        return this.CorrespondenceAddress;\r\n    };\r\n    getWorkingHours = () => {\r\n        return this.WorkingHours;\r\n    };\r\n    getFoundationYear = () => {\r\n        return this.FoundationYear;\r\n    };\r\n}\r\n\r\nexport { CompanyInfo };\r\n","let RequisiteName = Object.freeze({\r\n    TaxIdentificationNumber: 'ИНН',\r\n    RegistrationReasonCode: 'КПП',\r\n    CheckingAccount: 'Расчётный счёт',\r\n    CorrespondentAccount: 'Корреспондентский счёт',\r\n    BankIdentificationCode: 'БИК',\r\n    PrimaryStateRegistrationNumber: 'ОГРН',\r\n    IdentifierOfEnterprisesAndOrganizations: 'ОКПО'\r\n});\r\n\r\nclass CompanyRequisites {\r\n    constructor() {\r\n        this.TaxIdentificationNumber = '';\r\n        this.RegistrationReasonCode = '';\r\n        this.CheckingAccount = '';\r\n        this.CorrespondentAccount = '';\r\n        this.BankIdentificationCode = '';\r\n        this.PrimaryStateRegistrationNumber = '';\r\n        this.IdentifierOfEnterprisesAndOrganizations = '';\r\n    }\r\n    getTaxIdentificationNumber = () => {\r\n        return this.TaxIdentificationNumber;\r\n    };\r\n    getRegistrationReasonCode = () => {\r\n        return this.RegistrationReasonCode;\r\n    };\r\n    getCheckingAccount = () => {\r\n        return this.CheckingAccount;\r\n    };\r\n    getCorrespondentAccount = () => {\r\n        return this.CorrespondentAccount;\r\n    };\r\n    getBankIdentificationCode = () => {\r\n        return this.BankIdentificationCode;\r\n    };\r\n    getPrimaryStateRegistrationNumber = () => {\r\n        return this.PrimaryStateRegistrationNumber;\r\n    };\r\n    getIdentifierOfEnterprisesAndOrganizations = () => {\r\n        return this.IdentifierOfEnterprisesAndOrganizations;\r\n    };\r\n}\r\n\r\nexport { CompanyRequisites, RequisiteName };\r\n","import { CompanyInfo } from './InternalDataTypes/CompanyInfo';\r\nimport { CompanyRequisites } from './InternalDataTypes/CompanyRequisites';\r\n\r\nclass WebSiteStructure {\r\n    constructor() {\r\n        this.CompanyInfo = new CompanyInfo();\r\n        this.CompanyRequisites = new CompanyRequisites();\r\n        this.Sections = [];\r\n        this.SocialMedias = [];\r\n        this.Clients = [];\r\n        this.Employees = [];\r\n    }\r\n    getCompanyInfo = () => {\r\n        return this.CompanyInfo;\r\n    };\r\n    getCompanyRequisites = () => {\r\n        return this.CompanyRequisites;\r\n    };\r\n    getListOfSections = () => {\r\n        let sections = this.Sections.filter(site => !site.IsHidden);\r\n        sections.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return sections;\r\n    };\r\n    getListOfSocialMedia = () => {\r\n        let links = this.SocialMedias.filter(link => !link.IsHidden);\r\n        links.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return links;\r\n    };\r\n    getListOfClientLogos = () => {\r\n        let logos = this.Clients.filter(client => !client.IsHidden);\r\n        logos.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return logos;\r\n    };\r\n    getListOfKeyEmployees = () => {\r\n        let employees = this.Employees.filter(employee => !employee.IsHidden);\r\n        employees.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return employees;\r\n    };\r\n\r\n    sectionIsVisible = (sectionPath) => {\r\n        let section = this.Sections.find(section => section.Path === sectionPath);\r\n        if(section)\r\n            return !section.IsHidden;\r\n        return false;\r\n    };\r\n}\r\n\r\nexport { WebSiteStructure };\r\n","let SectionPathEnum = Object.freeze({\r\n    Main: '/main',\r\n    Company: '/company',\r\n    Contacts: '/contacts',\r\n    Portfolio: '/portfolio',\r\n    Services: '/services',\r\n    Clients: '/clients',\r\n    News: '/news',\r\n    NotFound: '/pageNotFound'\r\n});\r\n\r\nexport { SectionPathEnum };\r\n","class Prettifier {\r\n    static prettifyPhoneNumber = (rawPhoneNumber) => {\r\n        let prettyPhoneNumber =\r\n            rawPhoneNumber.substring(0, 2)\r\n            + ' ('\r\n            + rawPhoneNumber.substring(2, 5)\r\n            + ') '\r\n            + rawPhoneNumber.substring(5, 8)\r\n            + '-'\r\n            + rawPhoneNumber.substring(8, 10)\r\n            + '-'\r\n            + rawPhoneNumber.substring(10, 12);\r\n        return prettyPhoneNumber;\r\n    };\r\n}\r\n\r\nexport { Prettifier }\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Link } from 'react-router-dom';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Prettifier } from '../InternalDataTypes/Prettifier';\r\n\r\nclass Header extends React.Component {\r\n    state = {\r\n        navigationBar: null,\r\n        sticky: null\r\n    };\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.handleScroll);\r\n        let bar = document.getElementById('header-navigation-bar');\r\n        let stickyValue = bar.offsetTop;\r\n        this.setState({ navigationBar: bar, sticky: stickyValue});\r\n    }\r\n    handleScroll = () => {\r\n        const { navigationBar, sticky } = this.state;\r\n        if(window.pageYOffset >= sticky)\r\n            navigationBar.classList.add('sticky');\r\n        else\r\n            navigationBar.classList.remove('sticky');\r\n    };\r\n    getLinksToSections = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const currentSection = this.props.currentSection;\r\n        const sections = webSiteStructure.getListOfSections();\r\n        const sectionList = sections.map(section => {\r\n            const isActive = currentSection === section.Path ? 'active' : '';\r\n            let sectionChanged = (e) => {\r\n                this.props.sectionChanged(section.Path);\r\n            };\r\n            return (\r\n                <li className={ isActive } key={ section.OrdinalNumber }>\r\n                    <Link to={ process.env.PUBLIC_URL + section.Path } onClick={ sectionChanged }>{ section.Name }</Link>\r\n                </li>\r\n            );\r\n        });\r\n        return (\r\n            <ul className='nav navbar-nav navbar-right'>\r\n                { sectionList }\r\n            </ul>\r\n        );\r\n    };\r\n    render() {\r\n        const companyInfo = this.props.webSiteStructure.getCompanyInfo();\r\n        const phoneNumberRaw = companyInfo.getPhoneNumber();\r\n        const phoneNumberPretty = Prettifier.prettifyPhoneNumber(phoneNumberRaw);\r\n        const companyName = companyInfo.getName();\r\n        const email = companyInfo.getEmail();\r\n        return (\r\n            <React.Fragment>\r\n                <div className='navbar-default'>\r\n                    <div className='row'>\r\n                        <div className='col-xs-8'>\r\n                            <Link to={ process.env.PUBLIC_URL + SectionPathEnum.Main }>\r\n                                <img className='navbar-brand' style={ { height: '128px', width: '128px' } } src='logo.svg' alt={ companyName } />\r\n                            </Link>\r\n                        </div>\r\n                        <div className='col-xs-4 header-contacts'>\r\n                            <div className='row'>\r\n                                <a href={ 'tel:' + phoneNumberRaw }>{ phoneNumberPretty }</a>\r\n                            </div>\r\n                            <div className='row'>\r\n                                <a href={ 'mailto:' + email }>{ email }</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <nav id='header-navigation-bar' className='navbar navbar-inverse' style={ { zIndex: 99 } }>\r\n                    <div className='container-fluid'>\r\n                        <div className='navbar-header'>\r\n                            <button type='button' className='navbar-toggle' data-toggle='collapse' data-target='#header-navbar'>\r\n                                <span className='icon-bar'></span>\r\n                                <span className='icon-bar'></span>\r\n                                <span className='icon-bar'></span>\r\n                            </button>\r\n                            <Link className='navbar-brand' to={ process.env.PUBLIC_URL + SectionPathEnum.Main }>{ companyName }</Link>\r\n                        </div>\r\n\r\n                        <div className='collapse navbar-collapse' id='header-navbar'>\r\n                            { this.getLinksToSections() }\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure),\r\n    currentSection: PropTypes.string.isRequired,\r\n    sectionChanged: PropTypes.func.isRequired\r\n};\r\n\r\nexport { Header };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Link } from 'react-router-dom';\r\nimport { Prettifier } from '../InternalDataTypes/Prettifier';\r\n\r\nclass Footer extends React.Component {\r\n    getLinksToSections = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const currentSection = this.props.currentSection;\r\n        const sections = webSiteStructure.getListOfSections();\r\n        const sectionList = sections.map(section => {\r\n            let isActive = '';\r\n            if(currentSection === section.Path)\r\n                isActive = ' active';\r\n            let sectionChanged = () => {\r\n                this.props.sectionChanged(section.Path);\r\n            };\r\n            return (\r\n                <li className={ 'footer-nav-element' + isActive } key={ section.OrdinalNumber }>\r\n                    <Link className='footer-nav-element-selected' to={ process.env.PUBLIC_URL + section.Path } onClick={ sectionChanged }>{ section.Name }</Link>\r\n                </li>);\r\n        });\r\n        return (<ul className='nav navbar-nav'>{ sectionList }</ul>);\r\n    };\r\n    getLinksToSocialMedia = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const links = webSiteStructure.getListOfSocialMedia();\r\n        const linkList = links.map(link => {\r\n            return (\r\n                <a key={ link.OrdinalNumber } href={ link.Link } target='_blank' rel='noopener noreferrer'>\r\n                    <img className='social-media-icon' src={ process.env.PUBLIC_URL + link.PathToImage } alt={ link.Link }/>\r\n                </a>\r\n            );\r\n        });\r\n\r\n        const chunkSize = 5;\r\n        let linkRows = [];\r\n        for(let start = 0, end = linkList.length; start < end; start += chunkSize)\r\n            linkRows.push(linkList.slice(start, start + chunkSize));\r\n\r\n        const rowList = linkRows.map((row, index) => {\r\n            return (<div className='row' key={ index }>{ row }</div>);\r\n        });\r\n\r\n        return (<React.Fragment>{ rowList }</React.Fragment>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const phoneNumberRaw = webSiteStructure.getCompanyInfo().getPhoneNumber();\r\n        const phoneNumberPretty = Prettifier.prettifyPhoneNumber(phoneNumberRaw);\r\n        const companyName = webSiteStructure.getCompanyInfo().getName();\r\n        const email = webSiteStructure.getCompanyInfo().getEmail();\r\n        const legalAddress = webSiteStructure.getCompanyInfo().getLegalAddress().Address;\r\n\r\n        const foundationYear = webSiteStructure.getCompanyInfo().getFoundationYear();\r\n        const currentYear = (new Date()).getFullYear();\r\n        const yearsOfExistence = foundationYear === currentYear ? foundationYear : foundationYear + ' - ' + currentYear;\r\n\r\n        return (\r\n            <div id='footer-block'>\r\n                <div style={ { color: '#9d9d9d' } }>\r\n                    <div className='row' style={ { paddingTop: '30px' } }>\r\n                        <div className='col-xs-6' style={ { lineHeight: 1.8 } }>\r\n                            <div className='row'>{ companyName }</div>\r\n                            <div className='row'>{ legalAddress }</div>\r\n                            <div className='row footer-contacts'><a href={ 'mailto:' + email }>{ email }</a></div>\r\n                            <div className='row footer-contacts'><a href={ 'tel:' + phoneNumberRaw }>{ phoneNumberPretty }</a></div>\r\n                            <div className='row'>\r\n                                { this.getLinksToSocialMedia() }\r\n                            </div>\r\n                        </div>\r\n                        <div className='col-xs-3'>\r\n                        </div>\r\n                        <div className='col-xs-3'>\r\n                            <div className='navbar navbar-inverse navbar-stacked' style={ { borderColor: 'transparent' } }>\r\n                                { this.getLinksToSections() }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row' style={ { lineHeight: 3.8, textAlign: 'center' } }>© { yearsOfExistence } { companyName }</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFooter.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure),\r\n    currentSection: PropTypes.string.isRequired,\r\n    sectionChanged: PropTypes.func.isRequired\r\n};\r\n\r\nexport { Footer };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass MainPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Main);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Главная</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMainPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { MainPage };\r\n","class EmployeeData {\r\n    constructor() {\r\n        this.OrdinalNumber = 0;\r\n        this.IsHidden = false;\r\n        this.Photo = '';\r\n        this.Name = '';\r\n        this.Position = '';\r\n        this.PhoneNumber = '';\r\n        this.EMail = '';\r\n    }\r\n}\r\n\r\nexport { EmployeeData };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { EmployeeData } from './EmployeeData';\r\nimport { Prettifier } from './InternalDataTypes/Prettifier';\r\n\r\nclass Employee extends React.Component {\r\n    render() {\r\n        const data = this.props.data;\r\n        const phoneNumberRaw = data.PhoneNumber;\r\n        const phoneNumberPretty = Prettifier.prettifyPhoneNumber(phoneNumberRaw);\r\n        const email = data.EMail;\r\n\r\n        return (\r\n            <div>\r\n                <div style={ { float: 'left' } }>\r\n                    <img style={ { height: '128px', width: '128px' } } src={ process.env.PUBLIC_URL + data.PathToPhoto } alt={ data.Name }/>\r\n                </div>\r\n                <div>\r\n                    <p><b>ФИО:</b> { data.FullName }</p>\r\n                    <p><b>Должность:</b> { data.Position }</p>\r\n                    <p className='employee-contacts'><b>Телефон:</b> <a href={ 'tel:' + phoneNumberRaw }>{ phoneNumberPretty }</a></p>\r\n                    <p className='employee-contacts'><b>Почта:</b> <a href={ 'mailto:' + email }>{ email }</a></p>\r\n                    <br /><br />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nEmployee.propTypes = {\r\n    data: PropTypes.instanceOf(EmployeeData)\r\n};\r\n\r\nexport { Employee };\r\n\r\n/*\r\n\r\n*/","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Employee } from '../Employee';\r\nimport { EmployeeData } from '../EmployeeData';\r\n\r\nclass CompanyPage extends React.Component {\r\n    getKeyEmployees = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const employees = webSiteStructure.getListOfKeyEmployees();\r\n\r\n        const employeeList = employees.map(employee => {\r\n            return (\r\n                <Employee key={ employee.OrdinalNumber } data={ Object.assign(new EmployeeData(), employee) } />\r\n            );\r\n        });\r\n        return (<div>{ employeeList }</div>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Company);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>О компании</h1>\r\n                <p>текст с описанием того, какие мы успешные и прочий маркетинговый текст, когда основана, статистика по проектам, может инфа по количеству сотрудников</p>\r\n                { this.getKeyEmployees() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCompanyPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { CompanyPage };\r\n","import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport PropTypes from 'prop-types';\r\nimport { Address } from './InternalDataTypes/Address';\r\n\r\nconst AnyReactComponent = ({ text }) => <div id='map-office-label'>{text}</div>;\r\n\r\nclass Map extends Component {\r\n    render() {\r\n        const address = this.props.address;\r\n\r\n        return (\r\n            // Important! Always set the container height explicitly\r\n            <div style={{ height: '500px', width: '100%' }}>\r\n                <GoogleMapReact\r\n                    defaultCenter={ { lat: address.Latitude, lng: address.Longitude } }\r\n                    defaultZoom={address.Zoom}\r\n                >\r\n                    <AnyReactComponent\r\n                        lat={address.Latitude}\r\n                        lng={address.Longitude}\r\n                        text={address.MapLabel}\r\n                    />\r\n                </GoogleMapReact>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMap.propTypes = {\r\n    address: PropTypes.instanceOf(Address)\r\n};\r\n\r\nexport { Map };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Map } from '../Map';\r\nimport { Prettifier } from '../InternalDataTypes/Prettifier';\r\nimport { Address } from '../InternalDataTypes/Address';\r\nimport { CompanyRequisites, RequisiteName } from '../InternalDataTypes/CompanyRequisites';\r\n\r\nclass ContactsPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Contacts);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        const phoneNumberRaw = webSiteStructure.getCompanyInfo().getPhoneNumber();\r\n        const phoneNumberPretty = Prettifier.prettifyPhoneNumber(phoneNumberRaw);\r\n        const faxNumberRaw = webSiteStructure.getCompanyInfo().getFaxNumber();\r\n        const faxNumberPretty = Prettifier.prettifyPhoneNumber(faxNumberRaw);\r\n        const legalAddress = webSiteStructure.getCompanyInfo().getLegalAddress().Address;\r\n        const officeAddress = webSiteStructure.getCompanyInfo().getOfficeAddress();\r\n        const correspondenceAddress = webSiteStructure.getCompanyInfo().getCorrespondenceAddress().Address;\r\n        const workingHours = webSiteStructure.getCompanyInfo().getWorkingHours();\r\n        const email = webSiteStructure.getCompanyInfo().getEmail();\r\n\r\n        const requisites = webSiteStructure.getCompanyRequisites();\r\n\r\n        return (\r\n            <div>\r\n                <div className='row'>\r\n                    <div className='col-xs-6'>\r\n                        <h2>Контакты</h2>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Юридический телефон:</td>\r\n                                    <td>\r\n                                        <span className='employee-contacts'><a href={ 'tel:' + phoneNumberRaw }>{ phoneNumberPretty }</a></span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Факс:</td>\r\n                                    <td>\r\n                                        <span className='employee-contacts'><a href={ 'tel:' + faxNumberRaw }>{ faxNumberPretty }</a></span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Юридический адрес:</td>\r\n                                    <td>{ legalAddress }</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Адрес офиса:</td>\r\n                                    <td>{ officeAddress.Address }</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Почтовый адрес:</td>\r\n                                    <td>{ correspondenceAddress }</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Время работы:</td>\r\n                                    <td>{ workingHours }</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Адрес электронной почты:</td>\r\n                                    <td>\r\n                                        <span className='employee-contacts'><a href={ 'mailto:' + email }>{ email }</a></span>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className='col-xs-6'>\r\n                        <h2>Реквизиты</h2>\r\n                        <table>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>{ RequisiteName.TaxIdentificationNumber + ':'}</td>\r\n                                <td>{ requisites.getTaxIdentificationNumber() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.RegistrationReasonCode + ':'}</td>\r\n                                <td>{ requisites.getRegistrationReasonCode() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.CheckingAccount + ':'}</td>\r\n                                <td>{ requisites.getCheckingAccount() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.CorrespondentAccount + ':'}</td>\r\n                                <td>{ requisites.getCorrespondentAccount() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.BankIdentificationCode + ':'}</td>\r\n                                <td>{ requisites.getBankIdentificationCode() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.PrimaryStateRegistrationNumber + ':'}</td>\r\n                                <td>{ requisites.getPrimaryStateRegistrationNumber() }</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>{ RequisiteName.IdentifierOfEnterprisesAndOrganizations + ':'}</td>\r\n                                <td>{ requisites.getIdentifierOfEnterprisesAndOrganizations() }</td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <Map address={ Object.assign(new Address(), officeAddress) }/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nContactsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { ContactsPage };\r\n\r\n/*\r\n    - телефон наш или менеджеров\r\n\t- может фоточки, может инструкция как добраться\r\n\t- возможно форма для того чтоб можно было быстро отправить письмо, или запросить обратный звонок\r\n\t- реквизиты компании (название ооо, инн, кпп и т.д.)\r\n*/","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass PortfolioPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Portfolio);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Портфолио</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPortfolioPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { PortfolioPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass ServicesPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Services);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Услуги</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nServicesPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { ServicesPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass ClientsPage extends React.Component {\r\n    getClientLogos = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const logos = webSiteStructure.getListOfClientLogos();\r\n\r\n        const logoList = logos.map(logo => {\r\n            return (\r\n                <img key={ logo.OrdinalNumber } className='client-logo' src={ process.env.PUBLIC_URL + logo.PathToImage } alt={ logo.Name } />\r\n            );\r\n        });\r\n        return (<div>{ logoList }</div>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Clients);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Наши клиенты</h1>\r\n                <p>можно пару слов о том какие у нас крутые клиенты, какие они респектабельные, какие мы респектабельные и надёжные, мол нам доверяют</p>\r\n                <h2>Нам доверяют:</h2>\r\n                { this.getClientLogos() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nClientsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { ClientsPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass NewsPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.News);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Новости</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNewsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { NewsPage };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass NotFoundPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        return (\r\n            <div>\r\n                <h1>Страница не найдена</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNotFoundPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { NotFoundPage };\r\n","import React from 'react';\r\nimport { MainPage } from '../sections/MainPage';\r\nimport { CompanyPage } from '../sections/CompanyPage';\r\nimport { ContactsPage } from '../sections/ContactsPage';\r\nimport { PortfolioPage } from '../sections/PortfolioPage';\r\nimport { ServicesPage } from '../sections/ServicesPage';\r\nimport { ClientsPage } from '../sections/ClientsPage';\r\nimport { NewsPage } from '../sections/NewsPage';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { NotFoundPage } from '../sections/NotFoundPage';\r\n\r\nclass MainContent extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        return (\r\n            <div className='container-fluid main-content'>\r\n                <Switch>\r\n                    <Route exact path={ process.env.PUBLIC_URL + '/' }                          render={() => ( <MainPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Main }         render={() => ( <MainPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Company }      render={() => ( <CompanyPage    webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Contacts }     render={() => ( <ContactsPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Portfolio }    render={() => ( <PortfolioPage  webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Services }     render={() => ( <ServicesPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Clients }      render={() => ( <ClientsPage    webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.News }         render={() => ( <NewsPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.NotFound }     render={() => ( <NotFoundPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route render={() => ( <Redirect to={ process.env.PUBLIC_URL + SectionPathEnum.NotFound } /> )} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMainContent.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { MainContent };\r\n","import React, { Component } from 'react';\nimport { WebSiteStructure } from './WebSiteStructure';\nimport { Header } from './common/Header';\nimport { Footer } from './common/Footer';\n//import { NavigationBar } from './common/NavigationBar';\nimport { MainContent } from './common/MainContent';\nimport './main.css';\nimport { SectionPathEnum } from './SectionPathEnum';\nimport {CompanyInfo} from \"./InternalDataTypes/CompanyInfo\";\nimport {CompanyRequisites} from \"./InternalDataTypes/CompanyRequisites\";\n\nclass App extends Component {\n    state = {\n        webSiteStructure: null,\n        currentSection: SectionPathEnum.Main\n    };\n    sectionChanged = (section) => {\n        this.setState({ currentSection: section });\n    };\n    componentDidMount() {\n        fetch('data.json')\n            .then(response => response.json())\n            .then(data => {\n                let parsedData = Object.assign(new WebSiteStructure(), data);\n                parsedData.CompanyInfo = Object.assign(new CompanyInfo(), parsedData.CompanyInfo);\n                parsedData.CompanyRequisites = Object.assign(new CompanyRequisites(), parsedData.CompanyRequisites);\n                this.setState({ webSiteStructure: parsedData });\n            });\n    }\n    render() {\n        const { webSiteStructure, currentSection } = this.state;\n        return (\n            <div className='container-fluid' style={ { padding: '0px' } }>\n                <div className='App'>\n                    { webSiteStructure && (<Header webSiteStructure={ webSiteStructure } currentSection={ currentSection } sectionChanged={ this.sectionChanged } />) }\n                    { /* webSiteStructure && (<NavigationBar webSiteStructure={ webSiteStructure } />) */ }\n                    { webSiteStructure && (<MainContent webSiteStructure={ webSiteStructure }/>) }\n                    { webSiteStructure && (<Footer webSiteStructure={ webSiteStructure } currentSection={ currentSection } sectionChanged={ this.sectionChanged } />) }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render((\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    ), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}