{"version":3,"sources":["WebSiteStructure.js","SectionPathEnum.js","common/Header.js","common/Footer.js","sections/MainPage.js","EmployeeData.js","Employee.js","sections/CompanyPage.js","Map.js","sections/ContactsPage.js","sections/PortfolioPage.js","sections/ServicesPage.js","sections/ClientsPage.js","sections/NewsPage.js","sections/NotFoundPage.js","common/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["WebSiteStructure","_this","this","Object","classCallCheck","getListOfSections","sections","WebSiteSections","filter","site","IsHidden","sort","a","b","OrdinalNumber","getListOfSocialMedia","links","LinksToSocialMedia","link","getListOfClientLogos","logos","ClientsPage","ClientLogos","client","getListOfKeyEmployees","employees","CompanyPage","KeyEmployees","employee","sectionIsVisible","sectionLink","section","find","Link","getCompanyPhoneNumber","CompanyPhoneNumber","getCompanyEmail","CompanyEmail","getCompanyLegalAddress","CompanyLegalAddress","getCompanyOfficeAddress","CompanyOfficeAddress","getCompanyMailCorrespondenceAddress","CompanyMailCorrespondenceAddress","getCompanyFaxNumber","CompanyFaxNumber","getCompanyWorkingHours","CompanyWorkingHours","SectionPathEnum","freeze","Main","Company","Contacts","Portfolio","Services","Clients","News","NotFound","Header","getLinksToSections","webSiteStructure","props","currentSection","sectionList","map","isActive","react_default","createElement","className","key","to","process","onClick","e","sectionChanged","Name","id","src","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","React","Component","Footer","getLinksToSocialMedia","linkList","href","target","rel","Icon","Fragment","MainPage","Redirect","EmployeeData","Photo","Position","PhoneNumber","Email","Employee","data","style","float","height","width","getKeyEmployees","employeeList","Employee_Employee","assign","Caption","Text","AnyReactComponent","_ref","text","Map","lib_default","defaultCenter","center","defaultZoom","zoom","Map_AnyReactComponent","lat","lng","defaultProps","ContactsPage","Map_Map","PortfolioPage","ServicesPage","getClientLogos","logoList","logo","NewsPage","NotFoundPage","MainContent","Switch","Route","exact","path","render","MainPage_MainPage","CompanyPage_CompanyPage","ContactsPage_ContactsPage","PortfolioPage_PortfolioPage","ServicesPage_ServicesPage","ClientsPage_ClientsPage","NewsPage_NewsPage","NotFoundPage_NotFoundPage","App","state","setState","_this2","fetch","then","response","json","_this$state","Header_Header","MainContent_MainContent","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.997d3989.chunk.js","sourcesContent":["class WebSiteStructure {\r\n    constructor() {\r\n        this.CompanyPhoneNumber = '';\r\n        this.CompanyEmail = '';\r\n        this.CompanyLegalAddress = '';\r\n        this.CompanyOfficeAddress = '';\r\n        this.CompanyMailCorrespondenceAddress = '';\r\n        this.CompanyFaxNumber = '';\r\n        this.CompanyWorkingHours = '';\r\n        this.WebSiteSections = [];\r\n        this.LinksToSocialMedia = [];\r\n        this.ClientsPage = {};\r\n        this.CompanyPage = {};\r\n    }\r\n    getListOfSections = () => {\r\n        let sections = this.WebSiteSections.filter(site => !site.IsHidden);\r\n        sections.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return sections;\r\n    };\r\n    getListOfSocialMedia = () => {\r\n        let links = this.LinksToSocialMedia.filter(link => !link.IsHidden);\r\n        links.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return links;\r\n    };\r\n    getListOfClientLogos = () => {\r\n        let logos = this.ClientsPage.ClientLogos.filter(client => !client.IsHidden);\r\n        logos.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return logos;\r\n    };\r\n    getListOfKeyEmployees = () => {\r\n        let employees = this.CompanyPage.KeyEmployees.filter(employee => !employee.IsHidden);\r\n        employees.sort((a, b) => {\r\n            if(a.OrdinalNumber < b.OrdinalNumber)\r\n                return -1;\r\n            if(b.OrdinalNumber < a.OrdinalNumber)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        return employees;\r\n    };\r\n    sectionIsVisible = (sectionLink) => {\r\n        let section = this.WebSiteSections.find(section => section.Link === sectionLink);\r\n        if(section)\r\n            return !section.IsHidden;\r\n        return false;\r\n    };\r\n    getCompanyPhoneNumber = () => {\r\n        return this.CompanyPhoneNumber;\r\n    };\r\n    getCompanyEmail = () => {\r\n        return this.CompanyEmail;\r\n    };\r\n    getCompanyLegalAddress = () => {\r\n        return this.CompanyLegalAddress;\r\n    };\r\n    getCompanyOfficeAddress = () => {\r\n        return this.CompanyOfficeAddress;\r\n    };\r\n    getCompanyMailCorrespondenceAddress = () => {\r\n        return this.CompanyMailCorrespondenceAddress;\r\n    };\r\n    getCompanyFaxNumber = () => {\r\n        return this.CompanyFaxNumber;\r\n    };\r\n    getCompanyWorkingHours = () => {\r\n        return this.CompanyWorkingHours;\r\n    };\r\n}\r\n\r\nexport { WebSiteStructure };\r\n","let SectionPathEnum = Object.freeze({\r\n    Main: '/main',\r\n    Company: '/company',\r\n    Contacts: '/contacts',\r\n    Portfolio: '/portfolio',\r\n    Services: '/services',\r\n    Clients: '/clients',\r\n    News: '/news',\r\n    NotFound: '/pageNotFound'\r\n});\r\n\r\nexport { SectionPathEnum };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Link } from 'react-router-dom';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\n\r\nclass Header extends React.Component {\r\n    getLinksToSections = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const currentSection = this.props.currentSection;\r\n        const sections = webSiteStructure.getListOfSections();\r\n        const sectionList = sections.map(section => {\r\n            let isActive = '';\r\n            if(currentSection === section.Link)\r\n                isActive = ' active active-menu-item';\r\n            let sectionChanged = (e) => {\r\n                this.props.sectionChanged(section.Link);\r\n            };\r\n            return (\r\n                <li className={ 'nav-item' + isActive } key={ section.OrdinalNumber }>\r\n                    <Link className='nav-link' to={ process.env.PUBLIC_URL + section.Link } onClick={ sectionChanged }>{ section.Name }</Link>\r\n                </li>\r\n            );\r\n        });\r\n        return (<ul className='navbar-nav mr-auto'>{ sectionList }</ul>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        return (\r\n            <div id='header-block'>\r\n                <div className='navbar navbar-expand-lg navbar-light bg-light'>\r\n                    <span className='navbar-brand'>{ webSiteStructure.getCompanyPhoneNumber() }</span>\r\n                    <span className='navbar-brand'>{ webSiteStructure.getCompanyEmail() }</span>\r\n                </div>\r\n                <nav className='navbar navbar-expand-lg navbar-light bg-light'>\r\n                    <Link to={ process.env.PUBLIC_URL + SectionPathEnum.Main}><img className='navbar-brand' src='logo.png' alt='Company logo'/></Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                            data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\r\n                            aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        { this.getLinksToSections() }\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure),\r\n    currentSection: PropTypes.string.isRequired,\r\n    sectionChanged: PropTypes.func.isRequired\r\n};\r\n\r\nexport { Header };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends React.Component {\r\n    getLinksToSections = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const currentSection = this.props.currentSection;\r\n        const sections = webSiteStructure.getListOfSections();\r\n        const sectionList = sections.map(section => {\r\n            let isActive = '';\r\n            if(currentSection === section.Link)\r\n                isActive = ' active active-menu-item';\r\n            let sectionChanged = (e) => {\r\n                this.props.sectionChanged(section.Link);\r\n            };\r\n            return (\r\n                <li className={ isActive } key={ section.OrdinalNumber }>\r\n                    <Link to={ process.env.PUBLIC_URL + section.Link } onClick={ sectionChanged }>{ section.Name }</Link>\r\n                </li>);\r\n        });\r\n        return (<ul>{ sectionList }</ul>);\r\n    };\r\n    getLinksToSocialMedia = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const links = webSiteStructure.getListOfSocialMedia();\r\n        const linkList = links.map(link => {\r\n            return (\r\n                <a key={ link.OrdinalNumber } href={ link.Link } target='_blank' rel='noopener noreferrer'>\r\n                    <img className='social-media-icon' src={ process.env.PUBLIC_URL + link.Icon } alt={ link.Link }/>\r\n                </a>\r\n            );\r\n        });\r\n        return (<React.Fragment>{ linkList }</React.Fragment>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        return (\r\n            <div id='footer-block'>\r\n                <p>copyright</p>\r\n                <p>{ webSiteStructure.getCompanyLegalAddress() }</p>\r\n                <p>{ webSiteStructure.getCompanyEmail() }</p>\r\n                <p>{ webSiteStructure.getCompanyPhoneNumber() }</p>\r\n                { this.getLinksToSections() }\r\n                { this.getLinksToSocialMedia() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFooter.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure),\r\n    currentSection: PropTypes.string.isRequired,\r\n    sectionChanged: PropTypes.func.isRequired\r\n};\r\n\r\nexport { Footer };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass MainPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Main);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <p><b>ГЛАВНАЯ</b></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMainPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { MainPage };\r\n","class EmployeeData {\r\n    constructor() {\r\n        this.OrdinalNumber = 0;\r\n        this.IsHidden = false;\r\n        this.Photo = '';\r\n        this.Name = '';\r\n        this.Position = '';\r\n        this.PhoneNumber = '';\r\n        this.Email = '';\r\n    }\r\n}\r\n\r\nexport { EmployeeData };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { EmployeeData } from './EmployeeData';\r\n\r\nclass Employee extends React.Component {\r\n    render() {\r\n        const data = this.props.data;\r\n\r\n        return (\r\n            <div>\r\n                <div style={ { float: 'left' } }>\r\n                    <img style={ { height: '128px', width: '128px' } } src={ process.env.PUBLIC_URL + data.Photo } alt={ data.Name }/>\r\n                </div>\r\n                <div>\r\n                    <p><b>ФИО:</b> { data.Name }</p>\r\n                    <p><b>Должность:</b> { data.Position }</p>\r\n                    <p><b>Телефон:</b> { data.PhoneNumber }</p>\r\n                    <p><b>Почта:</b> { data.Email }</p>\r\n                    <br /><br />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nEmployee.propTypes = {\r\n    data: PropTypes.instanceOf(EmployeeData)\r\n};\r\n\r\nexport { Employee };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Employee } from '../Employee';\r\nimport { EmployeeData } from '../EmployeeData';\r\n\r\nclass CompanyPage extends React.Component {\r\n    getKeyEmployees = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const employees = webSiteStructure.getListOfKeyEmployees();\r\n\r\n        const employeeList = employees.map(employee => {\r\n            return (\r\n                <Employee key={ employee.OrdinalNumber } data={ Object.assign(new EmployeeData(), employee) } />\r\n            );\r\n        });\r\n        return (<div>{ employeeList }</div>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Company);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ webSiteStructure.CompanyPage.Caption }</h1>\r\n                <p>{ webSiteStructure.CompanyPage.Text }</p>\r\n                { this.getKeyEmployees() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCompanyPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { CompanyPage };\r\n","import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nconst AnyReactComponent = ({ text }) => <div id='map-office-label'>{text}</div>;\r\n\r\nclass Map extends Component {\r\n    static defaultProps = {\r\n        center: {\r\n            lat: 55.871203,\r\n            lng: 37.658275\r\n        },\r\n        zoom: 17\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            // Important! Always set the container height explicitly\r\n            <div style={{ height: '500px', width: '100%' }}>\r\n                <GoogleMapReact\r\n                    defaultCenter={this.props.center}\r\n                    defaultZoom={this.props.zoom}\r\n                >\r\n                    <AnyReactComponent\r\n                        lat={55.871203}\r\n                        lng={37.658275}\r\n                        text={'Наш офис'}\r\n                    />\r\n                </GoogleMapReact>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Map };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { Map } from '../Map';\r\n\r\nclass ContactsPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Contacts);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ webSiteStructure.ContactsPage.Caption }</h1>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Юридический телефон:</td>\r\n                            <td>{ webSiteStructure.getCompanyPhoneNumber() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Факс:</td>\r\n                            <td>{ webSiteStructure.getCompanyFaxNumber() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Юридический адрес:</td>\r\n                            <td>{ webSiteStructure.getCompanyLegalAddress() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Адрес офиса:</td>\r\n                            <td>{ webSiteStructure.getCompanyOfficeAddress() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Почтовый адрес:</td>\r\n                            <td>{ webSiteStructure.getCompanyMailCorrespondenceAddress() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Время работы:</td>\r\n                            <td>{ webSiteStructure.getCompanyWorkingHours() }</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Адрес электронной почты:</td>\r\n                            <td>{ webSiteStructure.getCompanyEmail() }</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <Map />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nContactsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { ContactsPage };\r\n\r\n/*\r\n    - телефон наш или менеджеров\r\n\t- может фоточки, может инструкция как добраться\r\n\t- возможно форма для того чтоб можно было быстро отправить письмо, или запросить обратный звонок\r\n\t- реквизиты компании (название ооо, инн, кпп и т.д.)\r\n*/","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass PortfolioPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Portfolio);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <p><b>ПОРТФОЛИО</b></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPortfolioPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { PortfolioPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass ServicesPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Services);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <p><b>УСЛУГИ</b></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nServicesPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { ServicesPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass ClientsPage extends React.Component {\r\n    getClientLogos = () => {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        const logos = webSiteStructure.getListOfClientLogos();\r\n\r\n        const logoList = logos.map(logo => {\r\n            return (\r\n                <img key={ logo.OrdinalNumber } className='client-logo' src={ process.env.PUBLIC_URL + logo.Icon } alt='missing text' />\r\n            );\r\n        });\r\n        return (<div>{ logoList }</div>);\r\n    };\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.Clients);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ webSiteStructure.ClientsPage.Caption }</h1>\r\n                <p>{ webSiteStructure.ClientsPage.Text }</p>\r\n                <h2>Нам доверяют:</h2>\r\n                { this.getClientLogos() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nClientsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { ClientsPage };\r\n","import React from 'react';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass NewsPage extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n\r\n        const sectionIsVisible = webSiteStructure.sectionIsVisible(SectionPathEnum.News);\r\n        if(!sectionIsVisible)\r\n            return (<Redirect to={ SectionPathEnum.NotFound } />);\r\n\r\n        return (\r\n            <div>\r\n                <p><b>НОВОСТИ</b></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNewsPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { NewsPage };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\n\r\nclass NotFoundPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p><b>СТРАНИЦА НЕ НАЙДЕНА</b></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNotFoundPage.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { NotFoundPage };\r\n","import React from 'react';\r\nimport { MainPage } from '../sections/MainPage';\r\nimport { CompanyPage } from '../sections/CompanyPage';\r\nimport { ContactsPage } from '../sections/ContactsPage';\r\nimport { PortfolioPage } from '../sections/PortfolioPage';\r\nimport { ServicesPage } from '../sections/ServicesPage';\r\nimport { ClientsPage } from '../sections/ClientsPage';\r\nimport { NewsPage } from '../sections/NewsPage';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WebSiteStructure } from '../WebSiteStructure';\r\nimport { SectionPathEnum } from '../SectionPathEnum';\r\nimport { NotFoundPage } from '../sections/NotFoundPage';\r\n\r\nclass MainContent extends React.Component {\r\n    render() {\r\n        const webSiteStructure = this.props.webSiteStructure;\r\n        return (\r\n            <div id='main-content'>\r\n                <Switch>\r\n                    <Route exact path={ process.env.PUBLIC_URL + '/' }                          render={() => ( <MainPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Main }         render={() => ( <MainPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Company }      render={() => ( <CompanyPage    webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Contacts }     render={() => ( <ContactsPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Portfolio }    render={() => ( <PortfolioPage  webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Services }     render={() => ( <ServicesPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.Clients }      render={() => ( <ClientsPage    webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.News }         render={() => ( <NewsPage       webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route       path={ process.env.PUBLIC_URL + SectionPathEnum.NotFound }     render={() => ( <NotFoundPage   webSiteStructure={ webSiteStructure } /> )} />\r\n                    <Route render={() => ( <Redirect to={ process.env.PUBLIC_URL + SectionPathEnum.NotFound } /> )} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMainContent.propTypes = {\r\n    webSiteStructure: PropTypes.instanceOf(WebSiteStructure)\r\n};\r\n\r\nexport { MainContent };\r\n","import React, { Component } from 'react';\r\nimport { WebSiteStructure } from './WebSiteStructure';\r\nimport { Header } from './common/Header';\r\nimport { Footer } from './common/Footer';\r\n//import { NavigationBar } from './common/NavigationBar';\r\nimport { MainContent } from './common/MainContent';\r\nimport './main.css';\r\nimport { SectionPathEnum } from './SectionPathEnum';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        webSiteStructure: null,\r\n        currentSection: SectionPathEnum.Main\r\n    };\r\n    sectionChanged = (section) => {\r\n        this.setState({ currentSection: section });\r\n    };\r\n    componentDidMount() {\r\n        fetch('data.json')\r\n            .then(response => response.json())\r\n            .then(data => this.setState(\r\n                { webSiteStructure: Object.assign(new WebSiteStructure(), data) })\r\n            );\r\n    }\r\n    render() {\r\n        const { webSiteStructure, currentSection } = this.state;\r\n        return (\r\n            <div className='container'>\r\n                <div className='App'>\r\n                    { webSiteStructure && (<Header webSiteStructure={ webSiteStructure } currentSection={ currentSection } sectionChanged={ this.sectionChanged } />) }\r\n                    { /* webSiteStructure && (<NavigationBar webSiteStructure={ webSiteStructure } />) */ }\r\n                    { webSiteStructure && (<MainContent webSiteStructure={ webSiteStructure }/>) }\r\n                    { webSiteStructure && (<Footer webSiteStructure={ webSiteStructure } currentSection={ currentSection } sectionChanged={ this.sectionChanged } />) }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n//import 'bootstrap/dist/css/bootstrap.min.css';\r\n//import 'bootstrap/dist/js/bootstrap.bundle.min';\r\n//import $ from 'jquery';\r\n//import Popper from 'popper.js';\r\n\r\nReactDOM.render((\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    ), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}